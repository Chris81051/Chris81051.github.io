[{"title":"[LeetCode] 1. Two Sum","url":"/2023/04/14/LeetCode-1-Two-Sum-Java-Python/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><u>前言</u></h2><p>　　我想這題是正要開始寫 LeetCode 的人，大部分的人的第一題吧，這題是個基本題算在 easy 的題型，看到題目直接就會想到使用雙迴圈的寫法，不過雙迴圈時間複雜度只有達到 <code>O(N^2)</code> 不那麼理想，如果比較資深的工程師會用 HashMap 做處理，這時時間複雜度可以達到 <code>N(1)</code>，這篇有 Java 和 Python 的寫法。</p>\n<h2 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a><u>題目</u></h2><blockquote>\n<p>Given an array of integers <strong>nums</strong> and an integer <strong>target</strong>, return indices of the two numbers such that they add up to <strong>nums</strong>.</p>\n<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>\n<p>You can return the answer in any order.</p>\n</blockquote>\n<blockquote>\n<p>給定一個整數陣列 <strong>nums</strong> 和一個整數結果 <strong>target</strong>，陣列中會有兩個元素加起來等於整數結果 <strong>target</strong>，回傳這兩個元素的位置。</p>\n<p>你可能假設每個輸入只會對應一個答案，而且你不能使用同樣的元素兩次</p>\n<p>你可以回傳任何順序的答案。</p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/two-sum/\">https://leetcode.com/problems/two-sum/</a></p>\n<h2 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a><u>題目限制</u></h2><p>同樣的元素不能使用兩次</p>\n<p><code>2 &lt;= nums.length &lt;= 104</code><br><code>109 &lt;= nums[i] &lt;= 109</code><br><code>109 &lt;= target &lt;= 109</code></p>\n<h2 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a><u>範例</u></h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">11</span>,<span class=\"number\">15</span>], target = <span class=\"number\">9</span></span><br><span class=\"line\">Output: [<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">Explanation: Because nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] == <span class=\"number\">9</span>, we <span class=\"keyword\">return</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span>].</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>], target = <span class=\"number\">6</span></span><br><span class=\"line\">Output: [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">3</span>,<span class=\"number\">3</span>], target = <span class=\"number\">6</span></span><br><span class=\"line\">Output: [<span class=\"number\">0</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a><u>思路&amp;筆記</u></h2><blockquote>\n<p>使用暴力的解法：雙迴圈</p>\n<ol>\n<li><p>迴圈 1 取得第一個索引，迴圈 2 取得第二個索引</p>\n</li>\n<li><p>但迴圈 2 的循環起始需要做個 i+1，目的是元素不要重複到</p>\n</li>\n<li><p>當迴圈 2 的索引都循環完後，迴圈 1 的索引會換到下一個索引，以此類推</p>\n</li>\n<li><p>直到兩個索引的值加起來，等於目標整數 target，就把當下的索引回傳出來</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"JAVA-初階實現\"><a href=\"#JAVA-初階實現\" class=\"headerlink\" title=\"JAVA 初階實現\"></a><u>JAVA 初階實現</u></h2><p>使用暴力解法：雙迴圈</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] twoSum(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i+<span class=\"number\">1</span>; j &lt; nums.length; j++)&#123; <span class=\"comment\">// 元素不要重複到</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(nums[i] + nums[j] == target)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;i, j&#125;; <span class=\"comment\">// 回傳索引</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;&#125;; <span class=\"comment\">// 當找不到符合條件的組合時，回傳一個空的整數陣列</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JAVA-進階實現\"><a href=\"#JAVA-進階實現\" class=\"headerlink\" title=\"JAVA 進階實現\"></a><u>JAVA 進階實現</u></h2><p>筆者還在學習中，參考了討論區裡網友的解法，這裡有使用 HashMap 存資料。</p>\n<p>如果目標整數是 9，想像一下兩個數是各左右一半，那麼 9 減掉其中一半會是另一半的話，答案就出來了，我們只是把答案先放在 HashMap 裡的 Key 的位置， Value 是對應的索引位置，那個判斷式就是判斷 HashMap 裡有沒有另外一半，有的話把 Value 輸出出來。</p>\n<blockquote>\n<ul>\n<li>遍歷時用 target 減掉當下索引的值，可以得出另一個整數。(這個就是我們要相加起來的另一個整數，沒有的話代表不是兩數的合)</li>\n<li>因第一次判斷 Map 本來就是空的一定不成功，所以把已判斷過的元素跟索引存進 Map 裡。(這裡要顛倒存，因為之後判斷時要取索引，索引放在值的地方)</li>\n<li>之後遍歷第二次時，判斷 <code>.containsKey()</code> 搜尋 Map 裡有無 key，這時 true 進入判斷式</li>\n<li><code>.get()</code> 取值 (剛顛倒存入的索引) → 0</li>\n<li>i 則是當下的索引 → 1</li>\n<li>最後把兩個索引存入 <code>new int[]</code> 陣列中 <code>[0, 1]</code></li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span>[] twoSum(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; numToIndex = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判斷鍵是否存在 Map</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numToIndex.containsKey(target - nums[i])) &#123; <span class=\"comment\">// 目標整數 - 索引 1 的值</span></span><br><span class=\"line\">                <span class=\"comment\">// 回傳兩個索引</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;numToIndex.get(target - nums[i]), i&#125;; <span class=\"comment\">// numToIndex 裡的&quot;值&quot;是索引,當前 i 是索引</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 把前面的資料添加進 Map </span></span><br><span class=\"line\">            numToIndex.put(nums[i], i);  <span class=\"comment\">// &#123;2,0&#125; (注意這邊是顛倒的存進去)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] <span class=\"number\">0</span>; <span class=\"comment\">// 仍未找到符合要求的元素，則返回一個空的 int[] 陣列</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python-初階實現\"><a href=\"#Python-初階實現\" class=\"headerlink\" title=\"Python 初階實現\"></a><u>Python 初階實現</u></h2><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">twoSum</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i + <span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums)): <span class=\"comment\"># 索引從第2個開始</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> i != j <span class=\"keyword\">and</span> nums[i] + nums[j] == target: <span class=\"comment\"># 索引不要重複且索引值相加</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> [i, j]</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> []</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Python-進階實現\"><a href=\"#Python-進階實現\" class=\"headerlink\" title=\"Python 進階實現\"></a><u>Python 進階實現</u></h2><p>筆者還在學習中，參考了討論區裡網友的解法。<br>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">twoSum</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        numToIndex = &#123;&#125; <span class=\"comment\"># 字典</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            <span class=\"comment\"># 判斷鍵是否存在 Map</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> target - nums[i] <span class=\"keyword\">in</span> numToIndex: <span class=\"comment\"># 目標整數 - 索引 1 的值</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> [numToIndex[target - nums[i]], i] </span><br><span class=\"line\">            <span class=\"comment\"># 把前面的資料添加進字典</span></span><br><span class=\"line\">            numToIndex[nums[i]] = i <span class=\"comment\"># 鍵 nums[i] = 值 i</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> []</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a><u>成績</u></h2><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Algorithm</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>初階實現</td>\n<td>85 ms</td>\n<td>42.7MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>初階實現</td>\n<td>4297 ms</td>\n<td>14.9MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Array","Easy"]},{"title":"[LeetCode] 11. Container With Most Water","url":"/2023/06/26/LeetCode-11-Container-With-Most-Water-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　這題是一個運用雙指標的算法，目標是找到可裝最多水的容器 (面積)，只需一個 while 迴圈就可依依遍歷到最大的面積答案，時間複雜度可估 <code>O(n)</code>，這裡有 JAVA 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>ith</code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.<br>Find two lines that together with the x-axis form a container, such that the container contains the most water.<br>Return <em>the maximum amount of water a container can store</em>.<br><strong>Notice</strong> that you may not slant the container.</p>\n</blockquote>\n<blockquote>\n<p>給定一個長度為 <code>n</code> 的整數陣列 <code>height</code> ，畫了 n 條的垂直線，第 i 條線的兩個端點是 (i, 0) 和 (i, height[i])<br>找到兩條線與方向 x 軸一起形成的容器，使得這個容器包含最多的水<br>回傳可裝最大容量的水的容器<br>注意 你不行傾斜容器</p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/container-with-most-water/\">https://leetcode.com/problems/container-with-most-water/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p><code>n == height.length</code><br><code>2 &lt;= n &lt;= 105</code><br><code>0 &lt;= height[i] &lt;= 104</code></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><div style=\"display:inline-block;\"> <img src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" alt=\"Container With Most Water\" style=\"float: left; margin-right: 10px;\"> </div>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: height = [<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">Output: <span class=\"number\">49</span></span><br><span class=\"line\">Explanation: The above vertical lines are represented by array [<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">8</span>,<span class=\"number\">3</span>,<span class=\"number\">7</span>]. In <span class=\"built_in\">this</span> <span class=\"keyword\">case</span>, the max area of <span class=\"title function_\">water</span> <span class=\"params\">(blue section)</span> the container can contain is <span class=\"number\">49.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: height = [<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">Output: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><p>這題題目要我們做的是，在一個陣列裡取出兩個元素後，找出兩個元素相乘後的最大面積，使用的是雙指標算法。</p>\n<blockquote>\n<ul>\n<li>我們思考一下，算出容器的面積會需要的是高度和寬度</li>\n<li>設定高度，取用於陣列裡各個元素的值</li>\n<li>另一方面制定兩個指標，分別為 <code>left</code> 和 <code>right</code>，是要來代表容器的寬度</li>\n<li>並將 <code>left = 0</code> 作為寬度的起始點 (指標一)</li>\n<li>另外把 <code>right = height.length - 1</code> 作為寬度的結束點 (指標二)</li>\n<li>然後運用 while 遍歷陣列，來找出最大的容器</li>\n<li>如果 <code>left</code> 比 <code>right</code> 矮的時候，代表需要找到下一個比較高的容器高度，要 <code>left++</code></li>\n<li>如果 <code>right</code> 比 <code>left</code> 矮的時候，代表需要找到前一個比較高的容器高度，要 <code>left--</code></li>\n<li>如果 <code>right</code> 等於 <code>left</code> 的時候，代表前後一起作用把容器縮小，要 <code>right++</code> 和 <code>left--</code></li>\n</ul>\n</blockquote>\n<p>[補充] 從矮牆開始取得，是因為裝水的時候基準會落在矮牆，超過矮牆的話水會溢出來，思考一下如果一個容器一邊高一邊低，水最多可以裝到哪? 當然最多只能裝到矮牆的最頂端，高牆就並不太重要了，取決於還是矮牆。</p>\n<h3 id=\"簡易示意圖\"><a href=\"#簡易示意圖\" class=\"headerlink\" title=\"簡易示意圖\"></a>簡易示意圖</h3><p>下述循環只演示到第三次，後續動作都是一樣的邏輯</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span>          |                             |</span><br><span class=\"line\"><span class=\"number\">7</span>          |                             |           |</span><br><span class=\"line\"><span class=\"number\">6</span>          |     |                       |           |</span><br><span class=\"line\"><span class=\"number\">5</span>          |     |           |           |           |</span><br><span class=\"line\"><span class=\"number\">4</span>          |     |           |     |     |           |</span><br><span class=\"line\"><span class=\"number\">3</span>          |     |           |     |     |     |     |</span><br><span class=\"line\"><span class=\"number\">2</span>          |     |     |     |     |     |     |     |</span><br><span class=\"line\"><span class=\"number\">1</span>    |     |     |     |     |     |     |     |     |</span><br><span class=\"line\">     <span class=\"number\">0</span>     <span class=\"number\">1</span>     <span class=\"number\">2</span>     <span class=\"number\">3</span>     <span class=\"number\">4</span>     <span class=\"number\">5</span>     <span class=\"number\">6</span>     <span class=\"number\">7</span>     <span class=\"number\">8</span></span><br><span class=\"line\">    left                                           <span class=\"type\">right</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">w</span> <span class=\"operator\">=</span> <span class=\"number\">8</span></span><br><span class=\"line\">h = <span class=\"number\">1</span></span><br><span class=\"line\">area = <span class=\"number\">8</span> * <span class=\"number\">1</span> = <span class=\"number\">8</span></span><br><span class=\"line\">max = <span class=\"number\">0</span> 更新為 <span class=\"number\">8</span></span><br><span class=\"line\">left &lt; right，left++</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span>          |                             |</span><br><span class=\"line\"><span class=\"number\">7</span>          |                             |           |</span><br><span class=\"line\"><span class=\"number\">6</span>          |     |                       |           |</span><br><span class=\"line\"><span class=\"number\">5</span>          |     |           |           |           |</span><br><span class=\"line\"><span class=\"number\">4</span>          |     |           |     |     |           |</span><br><span class=\"line\"><span class=\"number\">3</span>          |     |           |     |     |     |     |</span><br><span class=\"line\"><span class=\"number\">2</span>          |     |     |     |     |     |     |     |</span><br><span class=\"line\"><span class=\"number\">1</span>    |     |     |     |     |     |     |     |     |</span><br><span class=\"line\">     <span class=\"number\">0</span>     <span class=\"number\">1</span>     <span class=\"number\">2</span>     <span class=\"number\">3</span>     <span class=\"number\">4</span>     <span class=\"number\">5</span>     <span class=\"number\">6</span>     <span class=\"number\">7</span>     <span class=\"number\">8</span></span><br><span class=\"line\">          left                                     <span class=\"type\">right</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">w</span> <span class=\"operator\">=</span> <span class=\"number\">7</span></span><br><span class=\"line\">h = <span class=\"number\">7</span></span><br><span class=\"line\">area = <span class=\"number\">7</span> * <span class=\"number\">7</span> = <span class=\"number\">49</span></span><br><span class=\"line\">max = <span class=\"number\">8</span> 更新為 <span class=\"number\">49</span></span><br><span class=\"line\">left &lt; right，right--</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span>          |                             |</span><br><span class=\"line\"><span class=\"number\">7</span>          |                             |           |</span><br><span class=\"line\"><span class=\"number\">6</span>          |     |                       |           |</span><br><span class=\"line\"><span class=\"number\">5</span>          |     |           |           |           |</span><br><span class=\"line\"><span class=\"number\">4</span>          |     |           |     |     |           |</span><br><span class=\"line\"><span class=\"number\">3</span>          |     |           |     |     |     |     |</span><br><span class=\"line\"><span class=\"number\">2</span>          |     |     |     |     |     |     |     |</span><br><span class=\"line\"><span class=\"number\">1</span>    |     |     |     |     |     |     |     |     |</span><br><span class=\"line\">     <span class=\"number\">0</span>     <span class=\"number\">1</span>     <span class=\"number\">2</span>     <span class=\"number\">3</span>     <span class=\"number\">4</span>     <span class=\"number\">5</span>     <span class=\"number\">6</span>     <span class=\"number\">7</span>     <span class=\"number\">8</span></span><br><span class=\"line\">          left                               <span class=\"type\">right</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">w</span> <span class=\"operator\">=</span> <span class=\"number\">6</span></span><br><span class=\"line\">h = <span class=\"number\">3</span></span><br><span class=\"line\">area = <span class=\"number\">6</span> * <span class=\"number\">3</span> = <span class=\"number\">18</span></span><br><span class=\"line\">max 不變，一樣是 <span class=\"number\">49</span></span><br><span class=\"line\">left &gt; right，left++</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JAVA-實現\"><a href=\"#JAVA-實現\" class=\"headerlink\" title=\"JAVA 實現\"></a>JAVA 實現</h3><p>最簡單的是暴力解，就是把一個一個的面積遍歷出來比較，不過想當然兒送出結果跳出 Time Limit Exceeded 超過時間複雜度限制。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxArea</span><span class=\"params\">(<span class=\"type\">int</span>[] height)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 最大面積</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;height.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>; j&lt;height.length; j++)&#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">erea</span> <span class=\"operator\">=</span> (j-i) * Math.min(height[i], height[j]); <span class=\"comment\">// 寬度 * 最小高度</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (erea&gt;max)&#123;</span><br><span class=\"line\">                    max = erea; <span class=\"comment\">// 設定最大面積</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>比較聰明的算法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxArea</span><span class=\"params\">(<span class=\"type\">int</span>[] height)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 指標一</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> height.length - <span class=\"number\">1</span>; <span class=\"comment\">// 指標二</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 最大的面積</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left &lt; right)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> right - left; <span class=\"comment\">// 算出寬度</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> Math.min(height[left], height[right]); <span class=\"comment\">// 算出高度 (從最矮的開始)</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">area</span> <span class=\"operator\">=</span> h * w; <span class=\"comment\">// 算出面積</span></span><br><span class=\"line\">            max = Math.max(max, area); <span class=\"comment\">// 存入最大的面積</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(height[left] &lt; height[right]) &#123;</span><br><span class=\"line\">\t\t\t\tleft++; <span class=\"comment\">// 找下一個比較大的元素</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(height[left] &gt; height[right]) &#123;</span><br><span class=\"line\">\t\t\t\tright--; <span class=\"comment\">// 找前一個比較大的元素</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 前後一起縮小</span></span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxArea</span>(<span class=\"params\">self, height: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        left = <span class=\"number\">0</span> <span class=\"comment\"># 指標一</span></span><br><span class=\"line\">        right = <span class=\"built_in\">len</span>(height) - <span class=\"number\">1</span> <span class=\"comment\"># 指標二</span></span><br><span class=\"line\">        max_area = <span class=\"number\">0</span> <span class=\"comment\"># 最大的面積</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> left &lt; right:</span><br><span class=\"line\"></span><br><span class=\"line\">            w = right - left <span class=\"comment\"># 算出寬度</span></span><br><span class=\"line\">            h = <span class=\"built_in\">min</span>(height[left], height[right]) <span class=\"comment\"># 算出高度 (從最矮的開始)</span></span><br><span class=\"line\">            area = w * h <span class=\"comment\"># 算出面積</span></span><br><span class=\"line\">            max_area = <span class=\"built_in\">max</span>(max_area, area) <span class=\"comment\"># 存入最大的面積</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> height[left] &lt; height[right]:</span><br><span class=\"line\">                left += <span class=\"number\">1</span> <span class=\"comment\"># 找下一個比較大的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> height[left] &gt; height[right]:</span><br><span class=\"line\">                right -= <span class=\"number\">1</span> <span class=\"comment\"># 找前一個比較大的元素</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"comment\"># 前後一起縮小</span></span><br><span class=\"line\">                left += <span class=\"number\">1</span></span><br><span class=\"line\">                right -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> max_area</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>5ms</td>\n<td>55.8MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>744ms</td>\n<td>28.4MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Array","Medium"]},{"title":"[LeetCode] 136. Single Number","url":"/2023/04/28/LeetCode-136-Single-Number-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　這題目的邏輯是找出陣列中只出現過一次的元素，直覺是用一層 for 迴圈遍歷整個陣列後，使用 HashMap 來儲存元素跟出現的次數，最後再遍歷 Map 出結果，不過這樣同時會用到兩個 for 迴圈，時間複雜度推估會達到 <code>O(N^2)</code> ，另外討論區有比較高階的算法只需用到一個迴圈，時間複雜度可達 <code>O(n)</code>，這裡有 JAVA 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>Given a <strong>non-empty</strong> array of integers <strong>nums</strong>, every element appears twice except for one. Find that single one.<br>You must implement a solution with a linear runtime complexity and use only constant extra space.</p>\n</blockquote>\n<blockquote>\n<p>給定一個<strong>非空的</strong>整數陣列叫 <strong>nums</strong> ，每一個元素都會出現兩次除了一個以外。找到那個單獨的 整數。<br>你必須實現一種方案是線性的運作時間，而且只能使用常數的記憶體空間。</p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/single-number/\">https://leetcode.com/problems/single-number/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p><code>1 &lt;= nums.length &lt;= 3 * 104</code><br><code>3 * 104 &lt;= nums[i] &lt;= 3 * 104</code></p>\n<p>Each element in the array appears twice except for one element which appears only once.</p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">Output: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">Output: <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">1</span>]</span><br><span class=\"line\">Output: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><p>　　這邊第一個直覺是用迴圈把所有的整數全部取出來後，依依放在 Map 裡當 Key，然後把每個整數所出現的次數記錄在 Map 裡當 Value，最後遍歷這個 Map 取出 Value 小於 2 的 Key，因為小於 2 就代表陣列中只出現過一次，這個就是我們要的整數了！</p>\n<blockquote>\n<ul>\n<li><code>int num: nums</code> 遍歷陣列，把出現的元素記錄到 Map</li>\n<li>判斷有無這個元素</li>\n<li>沒有元素：放進 Map，元素為 Key、整數為 Value</li>\n<li>有元素：當前的元素的整數 Value +1</li>\n<li>遍歷 Map 判斷裡面的 Key 的 Value &lt; 2</li>\n<li>就回傳 Key</li>\n</ul>\n</blockquote>\n<h3 id=\"JAVA-初階實現\"><a href=\"#JAVA-初階實現\" class=\"headerlink\" title=\"JAVA 初階實現\"></a>JAVA 初階實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">singleNumber</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; isMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// foreach 寫法，類型 int 遍歷後把 nums 裡的每個值丟進 num</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num: nums)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!isMap.containsKey(num)) &#123; <span class=\"comment\">// 判斷有無這個元素</span></span><br><span class=\"line\">                isMap.put(num, <span class=\"number\">1</span>); <span class=\"comment\">// 放進 Map，元素為 Key、整數為 Value</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                isMap.put(num, isMap.get(num)+<span class=\"number\">1</span>); <span class=\"comment\">// 當前的元素的整數 Value +1</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 遍歷 Map 判斷裡面的元素的整數 Value == 1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Integer key: isMap.keySet())&#123; <span class=\"comment\">// 取得 Key</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 遍歷 Map 判斷裡面的 Key 的 Value &lt; 2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(isMap.get(key) &lt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                <span class=\"type\">return</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> key; <span class=\"comment\">// 就回傳 Key</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JAVA-進階實現\"><a href=\"#JAVA-進階實現\" class=\"headerlink\" title=\"JAVA 進階實現\"></a>JAVA 進階實現</h3><p>筆者還在學習中，參考了討論區裡網友的解法，這個技巧比較特別，有點偏向數學題目。</p>\n<p>這裡會使用到邏輯運算 XOR，位元運算的特性，數學的交換律。</p>\n<p>了解以下說明，步驟會很明瞭，運用數學交換律來排序後，新的排序會從小排到大而且一樣的整數會倆倆相鄰，然後已知的兩整數用邏輯運算後相不相同表示 0 或 1，得出最後無法被削除的整數是 4。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">邏輯運算 XOR</span><br><span class=\"line\"></span><br><span class=\"line\">將倆正整數都轉成 binay 後再進行比較，那雙方的 binay 是一樣的話為 <span class=\"number\">0</span>，不一樣的話為 <span class=\"number\">1</span>。(覺得複雜難理解的話可看下方算式)</span><br><span class=\"line\">每個位元會分開算</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"number\">4</span> =&gt; binay <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000100</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"number\">1</span> =&gt; binay <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000001</span></span><br><span class=\"line\">---------------------------------------------------------</span><br><span class=\"line\">               <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000101</span>   =&gt; <span class=\"number\">5</span></span><br><span class=\"line\">所以 <span class=\"number\">4</span> ^ <span class=\"number\">1</span> = <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">位元運算的特性</span><br><span class=\"line\"></span><br><span class=\"line\">A^A =&gt; <span class=\"type\">if</span> <span class=\"variable\">A</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, <span class=\"number\">0</span>^<span class=\"number\">0</span> =&gt; <span class=\"number\">0</span></span><br><span class=\"line\">       <span class=\"type\">if</span> <span class=\"variable\">A</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, <span class=\"number\">1</span>^<span class=\"number\">1</span> =&gt; <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">A^<span class=\"number\">0</span> =&gt; <span class=\"type\">if</span> <span class=\"variable\">A</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, <span class=\"number\">0</span>^<span class=\"number\">0</span> =&gt; <span class=\"number\">0</span></span><br><span class=\"line\">       <span class=\"type\">if</span> <span class=\"variable\">A</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, <span class=\"number\">1</span>^<span class=\"number\">0</span> =&gt; <span class=\"number\">1</span></span><br><span class=\"line\">A^<span class=\"number\">0</span> =&gt; A (得出<span class=\"number\">1</span>也就是A)</span><br><span class=\"line\"></span><br><span class=\"line\">A^B =&gt; B^A (交換律意思是相加時可以互相顛倒： A+B =&gt; B+A)</span><br><span class=\"line\"></span><br><span class=\"line\">最終得到一個現象，自己跟自己做=<span class=\"number\">0</span>，任何人跟<span class=\"number\">0</span>做=任何人，A跟B做=B跟A做</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">如何使用在題目</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span>[] nums = &#123;<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">       xor = <span class=\"number\">2</span>^<span class=\"number\">2</span>^<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">說明：</span><br><span class=\"line\"><span class=\"number\">1</span>) <span class=\"number\">2</span>^<span class=\"number\">2</span> 自己跟自己做 =&gt; <span class=\"number\">0</span> (任何自己跟自己做都是等於<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">2</span>) <span class=\"number\">0</span>^<span class=\"number\">1</span> <span class=\"number\">0</span>再跟<span class=\"number\">1</span>做 =&gt; <span class=\"number\">1</span>^<span class=\"number\">0</span>做 (注意這裡不是得到A^<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">3</span>) <span class=\"number\">1</span>^<span class=\"number\">0</span> <span class=\"number\">1</span>跟<span class=\"number\">0</span>做 =&gt; <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">結果答案得出 xor = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span>[] nums = &#123;<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">做排序 (因為交換律的特性所以都是相等的，是數學原理排序的不是電腦排的)</span><br><span class=\"line\"><span class=\"number\">4</span>^<span class=\"number\">1</span>^<span class=\"number\">2</span>^<span class=\"number\">1</span>^<span class=\"number\">2</span> =&gt;</span><br><span class=\"line\"><span class=\"number\">1</span>^<span class=\"number\">4</span>^<span class=\"number\">2</span>^<span class=\"number\">1</span>^<span class=\"number\">2</span> =&gt;</span><br><span class=\"line\"><span class=\"number\">1</span>^<span class=\"number\">4</span>^<span class=\"number\">1</span>^<span class=\"number\">2</span>^<span class=\"number\">2</span> =&gt;</span><br><span class=\"line\"><span class=\"number\">1</span>^<span class=\"number\">1</span>^<span class=\"number\">4</span>^<span class=\"number\">2</span>^<span class=\"number\">2</span> =&gt;</span><br><span class=\"line\"><span class=\"number\">1</span>^<span class=\"number\">1</span>^<span class=\"number\">2</span>^<span class=\"number\">4</span>^<span class=\"number\">2</span> =&gt;</span><br><span class=\"line\"><span class=\"number\">1</span>^<span class=\"number\">1</span>^<span class=\"number\">2</span>^<span class=\"number\">2</span>^<span class=\"number\">4</span> (最終)</span><br><span class=\"line\"></span><br><span class=\"line\">題目規定，每個整數會出現<span class=\"number\">2</span>次，排序完後整數會倆倆相鄰，所以算出來一樣的會變<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span>^<span class=\"number\">1</span> =&gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">2</span>^<span class=\"number\">2</span> =&gt; <span class=\"number\">0</span></span><br><span class=\"line\">最後會變成 <span class=\"number\">0</span>^<span class=\"number\">0</span>^<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">0</span>的部分全部都會消掉，所以最後答案剩下 <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">singleNumber</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">xor</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i : nums) &#123;</span><br><span class=\"line\">            xor ^= i; <span class=\"comment\">// xor = xor ^ i</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> xor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">singleNumber</span>(<span class=\"params\">self, nums: [<span class=\"built_in\">int</span>], result: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        dicList = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dicList: <span class=\"comment\"># 如果當前 Key 不在字典裡</span></span><br><span class=\"line\">                dicList[i]=<span class=\"number\">1</span> <span class=\"comment\"># 把 Key 和 Value 添加進去</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                dicList[i] = dicList[i]+<span class=\"number\">1</span> <span class=\"comment\"># 如果 Key 存在的話 value + 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> dicList:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> dicList[i] == <span class=\"number\">1</span>: <span class=\"comment\"># 如果當前 Key 的 value = 1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> i</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>14ms</td>\n<td>43.6MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>163ms</td>\n<td>19.4MB</td>\n</tr>\n</tbody></table>\n<h3 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h3><p><a href=\"https://www.youtube.com/watch?v=Hy1hE0HBR3U\">https://www.youtube.com/watch?v=Hy1hE0HBR3U</a></p>\n","categories":["LeetCode","Array","Easy"]},{"title":"[LeetCode] 15. 3Sum","url":"/2023/06/16/LeetCode-15-3Sum-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　這題是一個運用指標的算法，而且是用三個指標來追蹤，運用指標依序掃瞄出題目所要的元素並加起來，使用到了 for、while 兩個迴圈，時間複雜度估達 <code>O(n²)</code>，這裡有 JAVA 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.<br>Notice that the solution set must not contain duplicate triplets.</p>\n</blockquote>\n<blockquote>\n<p>給定一個整數陣列 nums，回傳所有的三元組，其中 <code>i != j</code>, <code>i != k</code>, <code>j != k</code>，且三元組全部加起來等於 0。<br>注意 這個解決方案必須不含重複的三元組。</p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/3sum/\">https://leetcode.com/problems/3sum/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p><code>3 &lt;= nums.length &lt;= 3000</code><br><code>105 &lt;= nums[i] &lt;= 105</code></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,-<span class=\"number\">1</span>,-<span class=\"number\">4</span>]</span><br><span class=\"line\">Output: [[-<span class=\"number\">1</span>,-<span class=\"number\">1</span>,<span class=\"number\">2</span>],[-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>]]</span><br><span class=\"line\">Explanation: </span><br><span class=\"line\">nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">2</span>] = (-<span class=\"number\">1</span>) + <span class=\"number\">0</span> + <span class=\"number\">1</span> = <span class=\"number\">0.</span></span><br><span class=\"line\">nums[<span class=\"number\">1</span>] + nums[<span class=\"number\">2</span>] + nums[<span class=\"number\">4</span>] = <span class=\"number\">0</span> + <span class=\"number\">1</span> + (-<span class=\"number\">1</span>) = <span class=\"number\">0.</span></span><br><span class=\"line\">nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">3</span>] + nums[<span class=\"number\">4</span>] = (-<span class=\"number\">1</span>) + <span class=\"number\">2</span> + (-<span class=\"number\">1</span>) = <span class=\"number\">0.</span></span><br><span class=\"line\">The distinct triplets are [-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>] and [-<span class=\"number\">1</span>,-<span class=\"number\">1</span>,<span class=\"number\">2</span>].</span><br><span class=\"line\">Notice that the order of the output and the order of the triplets does not matter.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">Output: []</span><br><span class=\"line\">Explanation: The only possible triplet does not sum up to <span class=\"number\">0.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">Output: [[<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">Explanation: The only possible triplet sums up to <span class=\"number\">0.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><p>直觀的作法是設定三個指標來掃描，第一個指標先不動，另外兩個指標依序掃描元素，掃描後把全部的元素加起來，判斷裡面的合有沒有等於 0 的，有的話就加入在要輸出的陣列裡，資料結構想到的是把陣列裡的元素個別放進集合裡，再將每一組串列集合放進 <code>HashSet</code> 大集合裡，<code>HashSet</code> 好處是可過濾掉重複的組合。</p>\n<blockquote>\n<ul>\n<li>將 Array 從小到大排序</li>\n<li>找出三個數的指標分別表示為 <code>i</code>、<code>j</code>、<code>k</code></li>\n<li>使用迴圈遍歷，並將 <code>i</code> 做為 <code>nums</code> 的起始點 (指標一)</li>\n<li><code>j</code> 則為 <code>i + 1</code> 為起始 (指標二)</li>\n<li><code>k</code> 則為 <code>nums.Length - 1</code> 為起始點 (指標三)</li>\n<li>首先以 <code>i</code> 為準，從 <code>j</code> 開始掃描到 <code>k</code> 算一輪</li>\n<li>並判斷三個指標指向的元素 <code>nums[i] + nums[j] + nums[k]</code> 加起來的合是否為 0 ，是的話會把此組合加進串列集合內</li>\n<li>之後讓 <code>j</code> 前進一格，<code>K</code> 後退一格，來排除重複的組合找到下一個組合</li>\n<li>由於元素從小排到大，當 <code>sum &lt; target</code> 的話，表示說我們的 <code>j</code> 要繼續往右掃描到一個更大的元素，加起來的合再做判斷</li>\n<li>那元素從小排到大，當 <code>sum &gt; target</code> 的話，表示說我們的 k 要繼續往左掃描到一個更小的元素，加起來的合再做判斷</li>\n</ul>\n</blockquote>\n<p>[備註] 使用 <code>HashSet</code> 是為了確保集合裡的資料不重複</p>\n<h3 id=\"簡易示意圖\"><a href=\"#簡易示意圖\" class=\"headerlink\" title=\"簡易示意圖\"></a>簡易示意圖</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">| -<span class=\"number\">4</span>  | -<span class=\"number\">1</span>  | -<span class=\"number\">1</span>  |  <span class=\"number\">0</span>  |  <span class=\"number\">1</span>  |  <span class=\"number\">2</span>  |</span><br><span class=\"line\">|-----|-----|-----|-----|-----|-----|</span><br><span class=\"line\">|  i  |  j  |     |     |     |  k  |</span><br><span class=\"line\"></span><br><span class=\"line\">sum = (-<span class=\"number\">4</span>) + (-<span class=\"number\">1</span>) + <span class=\"number\">2</span> = -<span class=\"number\">3</span></span><br><span class=\"line\">sum &lt; <span class=\"number\">0</span>，j++</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">| -<span class=\"number\">4</span>  | -<span class=\"number\">1</span>  | -<span class=\"number\">1</span>  |  <span class=\"number\">0</span>  |  <span class=\"number\">1</span>  |  <span class=\"number\">2</span>  |</span><br><span class=\"line\">|-----|-----|-----|-----|-----|-----|</span><br><span class=\"line\">|  i  |     |  j  |     |     |  k  |</span><br><span class=\"line\"></span><br><span class=\"line\">sum = (-<span class=\"number\">4</span>) + (-<span class=\"number\">1</span>) + <span class=\"number\">2</span> = -<span class=\"number\">3</span></span><br><span class=\"line\">sum &lt; <span class=\"number\">0</span>，j++</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">| -<span class=\"number\">4</span>  | -<span class=\"number\">1</span>  | -<span class=\"number\">1</span>  |  <span class=\"number\">0</span>  |  <span class=\"number\">1</span>  |  <span class=\"number\">2</span>  |</span><br><span class=\"line\">|-----|-----|-----|-----|-----|-----|</span><br><span class=\"line\">|  i  |     |     |  j  |     |  k  |</span><br><span class=\"line\"></span><br><span class=\"line\">sum = (-<span class=\"number\">4</span>) + <span class=\"number\">0</span> + <span class=\"number\">2</span> = -<span class=\"number\">2</span></span><br><span class=\"line\">sum &lt; <span class=\"number\">0</span>，j++</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">| -<span class=\"number\">4</span>  | -<span class=\"number\">1</span>  | -<span class=\"number\">1</span>  |  <span class=\"number\">0</span>  |  <span class=\"number\">1</span>  |  <span class=\"number\">2</span>  |</span><br><span class=\"line\">|-----|-----|-----|-----|-----|-----|</span><br><span class=\"line\">|  i  |     |     |     |  j  |  k  |</span><br><span class=\"line\"></span><br><span class=\"line\">sum = (-<span class=\"number\">4</span>) + <span class=\"number\">1</span> + <span class=\"number\">2</span> = -<span class=\"number\">1</span></span><br><span class=\"line\">sum &lt; <span class=\"number\">0</span>，j++</span><br><span class=\"line\">j == k，回到最新一輪，i++</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">| -<span class=\"number\">4</span>  | -<span class=\"number\">1</span>  | -<span class=\"number\">1</span>  |  <span class=\"number\">0</span>  |  <span class=\"number\">1</span>  |  <span class=\"number\">2</span>  |</span><br><span class=\"line\">|-----|-----|-----|-----|-----|-----|</span><br><span class=\"line\">|     |  i  |  j  |     |     |  k  |</span><br><span class=\"line\"></span><br><span class=\"line\">sum = (-<span class=\"number\">1</span>) + (-<span class=\"number\">1</span>) + <span class=\"number\">2</span> = <span class=\"number\">0</span>，加進集合</span><br><span class=\"line\">j++</span><br><span class=\"line\">k--</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">| -<span class=\"number\">4</span>  | -<span class=\"number\">1</span>  | -<span class=\"number\">1</span>  |  <span class=\"number\">0</span>  |  <span class=\"number\">1</span>  |  <span class=\"number\">2</span>  |</span><br><span class=\"line\">|-----|-----|-----|-----|-----|-----|</span><br><span class=\"line\">|     |  i  |     |  j  |  k  |     |</span><br><span class=\"line\"></span><br><span class=\"line\">sum = (-<span class=\"number\">1</span>) + <span class=\"number\">0</span> + <span class=\"number\">1</span> = <span class=\"number\">0</span>，加進集合</span><br><span class=\"line\">j++</span><br><span class=\"line\">k--</span><br><span class=\"line\">j &gt; k，回到最新一輪，i++</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">| -<span class=\"number\">4</span>  | -<span class=\"number\">1</span>  | -<span class=\"number\">1</span>  |  <span class=\"number\">0</span>  |  <span class=\"number\">1</span>  |  <span class=\"number\">2</span>  |</span><br><span class=\"line\">|-----|-----|-----|-----|-----|-----|</span><br><span class=\"line\">|     |     |  i  |  j  |     |  k  |</span><br><span class=\"line\"></span><br><span class=\"line\">i 與上次相同，回到最新一輪，i++</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">| -<span class=\"number\">4</span>  | -<span class=\"number\">1</span>  | -<span class=\"number\">1</span>  |  <span class=\"number\">0</span>  |  <span class=\"number\">1</span>  |  <span class=\"number\">2</span>  |</span><br><span class=\"line\">|-----|-----|-----|-----|-----|-----|</span><br><span class=\"line\">|     |     |     |  i  |  j  |  k  |</span><br><span class=\"line\"></span><br><span class=\"line\">sum = <span class=\"number\">0</span> + <span class=\"number\">1</span> + <span class=\"number\">2</span> = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JAVA-實現\"><a href=\"#JAVA-實現\" class=\"headerlink\" title=\"JAVA 實現\"></a>JAVA 實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">threeSum</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">target</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 目標整數</span></span><br><span class=\"line\">        Arrays.sort(nums); <span class=\"comment\">// 從小到大排序 (原Array)</span></span><br><span class=\"line\">        Set&lt;List&lt;Integer&gt;&gt; s = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(); <span class=\"comment\">// 存元素</span></span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; output = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(); <span class=\"comment\">// 輸出用</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; <span class=\"comment\">// 指標二</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> nums.length - <span class=\"number\">1</span>; <span class=\"comment\">// 指標三</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &lt; k) &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> nums[i] + nums[j] + nums[k]; <span class=\"comment\">// 指標全加起來</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sum == target) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 將陣列元素轉成集合再加到大集合內</span></span><br><span class=\"line\">                    s.add(Arrays.asList(nums[i], nums[j], nums[k])); <span class=\"comment\">// 類似這樣的資料結構 [[1, 2, 3], [2, 3, 4]]</span></span><br><span class=\"line\">                    <span class=\"comment\">// 縮小範圍</span></span><br><span class=\"line\">                    j++; </span><br><span class=\"line\">                    k--;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">                    j++; <span class=\"comment\">// 找更大的元素</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    k--; <span class=\"comment\">// 找更小的元素</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        output.addAll(s); <span class=\"comment\">// 集合加到陣列裡</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">threeSum</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        </span><br><span class=\"line\">        target = <span class=\"number\">0</span> <span class=\"comment\"># 目標整數</span></span><br><span class=\"line\">        nums.sort() <span class=\"comment\"># 從小到大排序 (原Array)</span></span><br><span class=\"line\">        s = <span class=\"built_in\">set</span>() <span class=\"comment\"># 存元素的集合</span></span><br><span class=\"line\">        output = [] <span class=\"comment\"># 輸出用的陣列</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            j = i + <span class=\"number\">1</span> <span class=\"comment\"># 指標二</span></span><br><span class=\"line\">            k = <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span> <span class=\"comment\"># 指標三</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> j &lt; k:</span><br><span class=\"line\">                total = nums[i] + nums[j] + nums[k] <span class=\"comment\"># 指標全加起來</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> total == target:</span><br><span class=\"line\">                    s.add((nums[i], nums[j], nums[k])) <span class=\"comment\"># 將陣列元素加到集合內</span></span><br><span class=\"line\">                    <span class=\"comment\"># 縮小範圍</span></span><br><span class=\"line\">                    j = j+<span class=\"number\">1</span> </span><br><span class=\"line\">                    k = k-<span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> total &lt; target:</span><br><span class=\"line\">                    j = j+<span class=\"number\">1</span> <span class=\"comment\"># 找更大的元素</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    k = k-<span class=\"number\">1</span> <span class=\"comment\"># 找更小的元素</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        output.extend(<span class=\"built_in\">list</span>(s)) <span class=\"comment\"># 添加進陣列</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> output</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>706ms</td>\n<td>50.8MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>2857ms</td>\n<td>20.2MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Array","Medium"]},{"title":"[LeetCode] 169. Majority Element","url":"/2023/04/23/LeetCode-169-Majority-Element-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　這題目的邏輯是找出陣列中出現次數過半的元素，這裡有使用一層 for 迴圈遍歷整個陣列後，用 HashMap 來操作存儲查找，Map 時間可以視為常數時間，時間複雜度可以達到 <code>O(n)</code>，這裡有 JAVA 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>Given an array <strong>nums</strong> of size <strong>n</strong>, return <em>the majority element.</em><br>The majority element is the element that appears more than <strong>⌊n &#x2F; 2⌋</strong> times. You may assume that the majority element always exists in the array.</p>\n</blockquote>\n<blockquote>\n<p>給定一個陣列 <strong>nums</strong> 大小為 <strong>n</strong>，回傳這個出現多次的元素。<br>這個出現多次的元素，出現超過半數。你可以認為這個出現多次的元素總是在這個陣列裡。</p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/majority-element/\">https://leetcode.com/problems/majority-element/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p><code>n == nums.length</code><br><code>1 &lt;= n &lt;= 5 * 104</code><br><code>109 &lt;= nums[i] &lt;= 109</code></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">Output: <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">Output: <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><blockquote>\n<ul>\n<li>遍歷陣列裡所有的元素</li>\n<li>把元素和次數存在 Map 裡 ( key：value )</li>\n<li>當下已有的元素，把 key 的次數 ( value ) +1</li>\n<li>把 Map 裡次數 (value) 大於陣列一半的 key 回傳</li>\n</ul>\n</blockquote>\n<h3 id=\"JAVA-實現\"><a href=\"#JAVA-實現\" class=\"headerlink\" title=\"JAVA 實現\"></a>JAVA 實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">majorityElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">        Map&lt;Integer, Integer&gt; isMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> ret=<span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// foreach 寫法，類型 int 遍歷後把 nums 裡的每個值丟進 num</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num: nums) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isMap.containsKey(num)) <span class=\"comment\">// 如果沒找到指定的 key</span></span><br><span class=\"line\">                isMap.put(num, <span class=\"number\">1</span>); <span class=\"comment\">// (key:value) 添加進 map</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                isMap.put(num, isMap.get(num)+<span class=\"number\">1</span>); <span class=\"comment\">// 找到指定的 key 的 value 後 +1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isMap.get(num)&gt;nums.length/<span class=\"number\">2</span>) &#123; <span class=\"comment\">// 如果當下的 key 的 value 大於陣列長度的一半</span></span><br><span class=\"line\">                ret = num;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JAVA-進階實現\"><a href=\"#JAVA-進階實現\" class=\"headerlink\" title=\"JAVA 進階實現\"></a>JAVA 進階實現</h3><p>筆者還在學習中，參考了在討論區裡網友一致認同的超簡單解法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">majorityElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Arrays.sort(nums); <span class=\"comment\">// 重新排序 (小到大)</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> nums[nums.length / <span class=\"number\">2</span>]; <span class=\"comment\">// 因重新排序後，獲取陣列中間的元素，一定是超過半數的元素</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">majorityElement</span>(<span class=\"params\">self, nums</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">        :type nums: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: int</span></span><br><span class=\"line\"><span class=\"string\">        &quot;&quot;&quot;</span></span><br><span class=\"line\">        dic = &#123;&#125; <span class=\"comment\"># 空字典</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 字典裡找尋 key (索引n)，如果找不到 key 的話，把陣列裡的索引 n 添加進字典當 key</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># 把次數 0+1 添加進去當 value</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            dic[n] = dic.get(n, <span class=\"number\">0</span>) + <span class=\"number\">1</span> <span class=\"comment\"># &#123;索引n:0+1&#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dic[n] &gt; <span class=\"built_in\">len</span>(nums)//<span class=\"number\">2</span>: <span class=\"comment\"># 判斷當前的 key 的值，有無大於陣列的一半</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> n <span class=\"comment\"># 回傳當前的 key</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>20 ms</td>\n<td>48.5MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>131 ms</td>\n<td>14.9MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Array","Easy"]},{"title":"[LeetCode] LeetCode 206. Reverse Linked List","url":"/2023/06/29/LeetCode-206-Reverse-Linked-List-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　這是一題單向鏈結串列反轉的題目，運用指標的算法，目標是將原本的鏈結串列倒序排列，此演算有使用到一個 while 迴圈，則時間複雜度估 <code>O(n)</code>，這裡有 JAVA 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>Given the <code>head</code> of a singly linked list, reverse the list, and return <em>the reversed list</em>.</p>\n</blockquote>\n<blockquote>\n<p>給定一個 <code>head</code> 單向鏈結串列，反轉這個串列，且回傳反轉過後的這個串列。</p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/reverse-linked-list/description/\">https://leetcode.com/problems/reverse-linked-list/description/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p>The number of nodes in the list is the range <code>[0, 5000]</code>.<br><code>5000 &lt;= Node.val &lt;= 5000</code></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><div style=\"display:inline-block;\"> <img src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg\" alt=\"Reverse\" style=\"float: left; margin-right: 10px;\"> </div>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: head = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">Output: [<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<div style=\"display:inline-block;\"> <img src=\"https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg\" alt=\"Reverse\" style=\"float: left; margin-right: 10px;\"> </div>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: head = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">Output: [<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: head = []</span><br><span class=\"line\">Output: []</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><p>鏈結串列的題目，簡單想像是在處理節點的位置，資料先放一邊別去裡他。<br>這裡設定三個指標分別是指向 null 的 (指標一)、指向當前 head 的 (指標二)、輔助指標 nextNode (指標三)。</p>\n<blockquote>\n<ul>\n<li>設定好三個指標後</li>\n<li>把當前的 <code>curr.next</code> 掛在輔助指標 nextNode 上 (確保在反轉的過程中不會失去原始下一個節點的位置)</li>\n<li>掛完之後把當前節點 <code>curr.next</code> 指向 prev (此時指針已反轉了)</li>\n<li>接下來移動指針 prev 到 curr</li>\n<li>將 curr 掛在 nextNode (剛剛保存的原始下一個節點的位置)</li>\n<li>以上邏輯循環到最後，當 curr 移動到 null 時則停止迴圈 (鏈結串列的末端節點一定會指向 null)</li>\n</ul>\n</blockquote>\n<p>[補充] <code>curr.next</code> 同等於 <code>curr → link</code> (指向下一個節點的意思)</p>\n<h3 id=\"JAVA-實現\"><a href=\"#JAVA-實現\" class=\"headerlink\" title=\"JAVA 實現\"></a>JAVA 實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">reverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> head; <span class=\"comment\">// 當前指標 (指標一)</span></span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">prev</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>; <span class=\"comment\">// 空集合指標 (指標二)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 檢查確定鏈結串列裡有資料</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (curr != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">ListNode</span> <span class=\"variable\">nextNode</span> <span class=\"operator\">=</span> curr.next; <span class=\"comment\">// 輔助指標 (指標三)，指向下一個節點 (資料暫存在輔助指標內)</span></span><br><span class=\"line\">            curr.next = prev; <span class=\"comment\">// 將 curr 的 next 指針指向 prev，(將當前節點的指針方向反轉)</span></span><br><span class=\"line\">            prev = curr; <span class=\"comment\">// 更新指針指向：將 prev 設為 curr</span></span><br><span class=\"line\">            curr = nextNode; <span class=\"comment\">// curr 設為 nextNode</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。<br>(Python 中不需要再宣告一個額外的變數來存儲原始的鏈結串列)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">reverseList</span>(<span class=\"params\">self, head: <span class=\"type\">Optional</span>[ListNode]</span>) -&gt; <span class=\"type\">Optional</span>[ListNode]:</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">        prev = <span class=\"literal\">None</span> <span class=\"comment\"># 空集合指標 (指標一)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> head:</span><br><span class=\"line\">            nextNode = head.<span class=\"built_in\">next</span> <span class=\"comment\"># 輔助指標 (指標二)</span></span><br><span class=\"line\">            head.<span class=\"built_in\">next</span> = prev <span class=\"comment\"># 反轉</span></span><br><span class=\"line\">            prev = head <span class=\"comment\"># 移動指標</span></span><br><span class=\"line\">            head = nextNode <span class=\"comment\"># 掛回去原本的鏈結串列</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> prev</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>0ms</td>\n<td>41.8MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>53ms</td>\n<td>17.9MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Linked List","Easy"]},{"title":"[LeetCode] 283. Move Zeroes","url":"/2023/05/05/LeetCode-283-Move-Zeroes-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　這題題目要設法將陣列中的非零元素全部往前移，題目要求不能配置新的空間，所以不能使用輔助的 Array，那我們就由本身的陣列來做循環添加，這是比較簡單的方法，需用到一層迴圈，時間複雜度推估可達 <code>O(n)</code>，這裡有 JAVA 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>Given an integer array <strong>nums</strong>, move all <strong>0</strong>‘s to the end of it while maintaining the relative order of the <strong>non-zero</strong> elements.<br><strong>Note</strong> that you must do this in-place without making a copy of the array.</p>\n</blockquote>\n<blockquote>\n<p>給定一個整數陣列為 <strong>nums</strong>，移動全部的 <strong>零</strong> 元素到最後面， 同時維持 <strong>非零</strong> 元素的原本順序。<br>注意 你必須在當前陣列做，不能複製一個陣列來做。</p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/move-zeroes/\">https://leetcode.com/problems/move-zeroes/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p><code>1 &lt;= nums.length &lt;= 104</code><br><code>231 &lt;= nums[i] &lt;= 231 - 1</code></p>\n<p><strong>Follow up:</strong> Could you minimize the total number of operations done?</p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">12</span>]</span><br><span class=\"line\">Output: [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">12</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">0</span>]</span><br><span class=\"line\">Output: [<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><p>題目要求不能配置新的空間，所以不能用輔助的 Array，那我們就由本身陣列來做循環添加。</p>\n<blockquote>\n<ul>\n<li>把非零元素加到當前陣列裡</li>\n<li>從陣列的最前面開始添加，索引從 0 開始 (從陣列的最前面)</li>\n<li>再把當前的陣列後面補 0 即可，索引從 3 開始 (從剛添加完非零元素後面開始)</li>\n</ul>\n</blockquote>\n<h3 id=\"JAVA-實現\"><a href=\"#JAVA-實現\" class=\"headerlink\" title=\"JAVA 實現\"></a>JAVA 實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveZeroes</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums == <span class=\"literal\">null</span> || nums.length == <span class=\"number\">0</span>) <span class=\"keyword\">return</span>; <span class=\"comment\">// 防止這個函式會直接回傳傳入的 nums 參數</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">insert</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 把非零元素加到當前陣列裡</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> num: nums)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                nums[insert++] = num; <span class=\"comment\">// 從陣列的最前面開始添加 (注意：元素會先被添加在 nums[insert]裡，之後 insert 才會被 ++)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 再把當前的陣列後面補 0 即可，索引從 3 開始</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (insert &lt; nums.length)&#123;</span><br><span class=\"line\">            nums[insert++] = <span class=\"number\">0</span>; <span class=\"comment\">// 添加 0 進去</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">moveZeroes</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 把非零元素加到當前陣列裡</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[i] !=<span class=\"number\">0</span>: <span class=\"comment\"># 不是非 0 元素</span></span><br><span class=\"line\">                nums[pointer] = nums[i]  <span class=\"comment\"># 取得當下元素，放到指定索引裡</span></span><br><span class=\"line\">                pointer += <span class=\"number\">1</span> <span class=\"comment\"># 索引++</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 再把當前的陣列後面補 0 即可，索引從 3 開始</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(pointer, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            nums[pointer] = <span class=\"number\">0</span> <span class=\"comment\"># 添加 0 進去</span></span><br><span class=\"line\">            pointer += <span class=\"number\">1</span> <span class=\"comment\"># 索引 ++</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-進階實現\"><a href=\"#Python-進階實現\" class=\"headerlink\" title=\"Python 進階實現\"></a>Python 進階實現</h3><p>筆者還在學習中，參考了在討論區裡網友討論度很高的 Swap 變數互換 簡潔的算法。</p>\n<blockquote>\n<ul>\n<li>把陣列中前面的元素和後面的元素設定好條件 (必須前面為非零元素，後面為零元素)</li>\n<li>將兩個元素做交換，把非零元素換到前面</li>\n<li>最後後面索引 +1，進行下一次比較交換元素</li>\n</ul>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">moveZeroes</span>(<span class=\"params\">self, nums: <span class=\"built_in\">list</span></span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        slow = <span class=\"number\">0</span> </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> fast <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[fast] != <span class=\"number\">0</span> <span class=\"keyword\">and</span> nums[slow] == <span class=\"number\">0</span>: <span class=\"comment\"># 前面的元素、後面的元素</span></span><br><span class=\"line\">                nums[slow], nums[fast] = nums[fast], nums[slow] <span class=\"comment\"># 將兩個元素做交換</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 第一次循環，剛開始索引 fast[0] slow[0]</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[slow] != <span class=\"number\">0</span>: </span><br><span class=\"line\">                slow += <span class=\"number\">1</span> <span class=\"comment\"># 索引 +1 後，換比較交換 fast[1] ，slow[2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他算法\"><a href=\"#其他算法\" class=\"headerlink\" title=\"其他算法\"></a>其他算法</h3><p>雙指針算法：<a href=\"https://medium.com/@urdreamliu/283-%E5%9C%96%E8%A7%A3-move-zeroes-4da4900f5aac\">https://medium.com/@urdreamliu/283-圖解-move-zeroes-4da4900f5aac</a></p>\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>1ms</td>\n<td>43.9MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>158ms</td>\n<td>17.9MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Array","Easy"]},{"title":"[LeetCode] 121. Best Time to Buy and Sell Stock","url":"/2023/04/18/LeetCode-121-Best-Time-to-Buy-and-Sell-Stock-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　究竟何時才是買賣股票的最好時機呢? 這題邏輯很生活化，就是把一個陣列內所有的價格遍歷完，低買高賣後把最大的差價回傳出來，這題使用了單迴圈遍歷陣列裡所有的價格，遍歷裡也是常數的時間操作，時間複雜度推算可以達到 <code>O(n)</code>，這篇有 Java 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>You are given an array <strong>prices</strong> where <strong>prices[i]</strong> is the price of a given stock on the <strong>ith</strong> day.<br>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.<br>Return <em>the maximum profit you can achieve from this transaction</em>. If you cannot achieve any profit, return <strong>0</strong>.</p>\n</blockquote>\n<blockquote>\n<p>給你一個價格陣列 <strong>prices</strong> ，<strong>prices[i]</strong> 是取得一個股票在第 i 天的價格。<br>你想要最大化你的利潤，藉著選擇一天去買一張股票和選擇在未來不同天裡去賣掉那張股票。<br>你可以從這個交易回傳最大化的利潤。如果你無法達到任何利潤，就回傳 0。</p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p>注意：不能在第二天買入後第一天賣出，必須先買後賣。</p>\n<p><code>1 &lt;= prices.length &lt;= 105</code><br><code>0 &lt;= prices[i] &lt;= 104</code></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: prices = [<span class=\"number\">7</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">Output: <span class=\"number\">5</span></span><br><span class=\"line\">Explanation: Buy on day <span class=\"number\">2</span> (price = <span class=\"number\">1</span>) and sell on day <span class=\"number\">5</span> (price = <span class=\"number\">6</span>), profit = <span class=\"number\">6</span>-<span class=\"number\">1</span> = <span class=\"number\">5.</span></span><br><span class=\"line\">Note that buying on day <span class=\"number\">2</span> and selling on day <span class=\"number\">1</span> is not allowed because you must buy before you sell.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: prices = [<span class=\"number\">7</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">Output: <span class=\"number\">0</span></span><br><span class=\"line\">Explanation: In <span class=\"built_in\">this</span> <span class=\"keyword\">case</span>, no transactions are done and the <span class=\"type\">max</span> <span class=\"variable\">profit</span> <span class=\"operator\">=</span> <span class=\"number\">0.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><blockquote>\n<ul>\n<li>判斷陣列中值的大小，把更小的值存起來</li>\n<li>兩數的相差 &#x3D; 把當前的索引的值 - 上一個索引的值</li>\n<li>比較前一個值，將比較大的值存入</li>\n</ul>\n</blockquote>\n<h3 id=\"JAVA-實現\"><a href=\"#JAVA-實現\" class=\"headerlink\" title=\"JAVA 實現\"></a>JAVA 實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;  <span class=\"comment\">// 整數類型中的最大值 2³¹</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">op</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pist</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; prices.length; i++)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 找到陣列中最小的值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(prices[i] &lt; min)&#123;</span><br><span class=\"line\">                min = prices[i]; <span class=\"comment\">// 前一個索引的值(最小的值)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 兩數的相差 = 當前索引的值 - 前一個索引的值(最小的值)</span></span><br><span class=\"line\">            pist = prices[i] - min;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">// 比較前一個值，將比較大的值存入</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(op &lt; pist)&#123;  </span><br><span class=\"line\">                op = pist;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> op;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxProfit</span>(<span class=\"params\">self, prices: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">min</span> = prices[<span class=\"number\">0</span>]; <span class=\"comment\"># 預設索引0</span></span><br><span class=\"line\">        op = <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 從索引1開始練遍歷</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(prices)):</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 找出最小值</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> prices[i] &lt; <span class=\"built_in\">min</span> :</span><br><span class=\"line\">                <span class=\"built_in\">min</span> = prices[i]</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># 把兩值的相差存入</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span>((prices[i] - <span class=\"built_in\">min</span>) &gt; op): <span class=\"comment\"># 比較前一個值</span></span><br><span class=\"line\">                op = prices[i] - <span class=\"built_in\">min</span> <span class=\"comment\"># 將比較大的值存入</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> op;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>2ms</td>\n<td>59.4MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>984 ms</td>\n<td>25  MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Array","Easy"]},{"title":"[LeetCode] 35. Search Insert Position","url":"/2023/05/17/LeetCode-35-Search-Insert-Position-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　這題標準運用了二分搜尋法，演算法通常需要使用二分思想，即每次能夠排除一半的範圍，快速的找出陣列中所要求的元素位置，這樣時間複雜度可達 <code>O(log n)</code>，另外也可以使用一層迴圈找出元素位置，但時間複雜度會下修到<code>O(n)</code>，這裡有 JAVA 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.<br>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>\n</blockquote>\n<blockquote>\n<p>給定一個已排序過有不同整數和目標值的陣列，如果有這個目標值就回傳這個索引 ，如果沒有這個值，就回傳按順序插入後的索引。<br>你必須寫出一個算法，為 <code>O(log n)</code> 的時間複雜度。</p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/search-insert-position/\">https://leetcode.com/problems/search-insert-position/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p><code>1 &lt;= nums.length &lt;= 104</code><br><code>104 &lt;= nums[i] &lt;= 104</code><br><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.<br><code>104 &lt;= target &lt;= 104</code></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], target = <span class=\"number\">5</span></span><br><span class=\"line\">Output: <span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], target = <span class=\"number\">2</span></span><br><span class=\"line\">Output: <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>], target = <span class=\"number\">7</span></span><br><span class=\"line\">Output: <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><p>主要是運用二分搜尋法來快速的找到值的位置，原理是每次循環都會將搜索範圍縮小一半。<br>如果 target 比中間值大，那麼搜索範圍將在中間值的右側。<br>如果 target 比中間值小，那麼搜索範圍將在中間值的左側。</p>\n<blockquote>\n<ol>\n<li>middle &#x3D; start + ( end - start ) &#x2F; 2 可取得中間值</li>\n<li>找出目標值在中間值的左側還是右側</li>\n<li>搜索範圍越來越小，直到最後回傳起點位置就是答案</li>\n</ol>\n</blockquote>\n<p><strong>[注意點]</strong> 之所以要用上述中間值的寫法會比較安全，因如果 start 和 end 趨近於最大數時，兩者相加起來的合可能會造成整數溢位</p>\n<p><strong>[備註]</strong> 回傳 start 原因是，在二分搜尋法中，每次都會將搜索範圍縮小一半。而搜尋範圍最小的時候，如果目標值不在該範圍內，那麼搜尋將停止。而此時，start 和 end 分別會指向搜尋範圍的左右兩端，此時 start 恰好會指向 target 應該插入的位置，因此最後返回 start 即可。</p>\n<h3 id=\"JAVA-實現\"><a href=\"#JAVA-實現\" class=\"headerlink\" title=\"JAVA 實現\"></a>JAVA 實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">searchInsert</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 起點位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> nums.length-<span class=\"number\">1</span>; <span class=\"comment\">// 終點位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 進入迴圈</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt;= end )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 創建中間值</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">middle</span> <span class=\"operator\">=</span> start + ( end - start ) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == nums[middle]) &#123; <span class=\"comment\">// 目標值 = 陣列中間值</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle; <span class=\"comment\">// 找到答案，回傳中間值索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[middle]) &#123; <span class=\"comment\">// 目標值 &lt; 陣列中間值 </span></span><br><span class=\"line\">                end = middle-<span class=\"number\">1</span>; <span class=\"comment\">// 重新定義終點，下次回圈找到新的終點就好 (因為目標值一定比自己小，要不包含 middle 自己)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 目標值 &gt; 陣列中間值 </span></span><br><span class=\"line\">                start = middle+<span class=\"number\">1</span>; <span class=\"comment\">// 重新定義起點，下次回圈從新的起點開始就好 (因為目標值一定比自己大，要不包含 middle 自己)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> start;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JAVA-其他實現\"><a href=\"#JAVA-其他實現\" class=\"headerlink\" title=\"JAVA 其他實現\"></a>JAVA 其他實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">searchInsert</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length; <span class=\"comment\">// 陣列長度</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt;= target) &#123; <span class=\"comment\">// 大於等於目標值</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> i; <span class=\"comment\">// 就回傳當前索引</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">searchInsert</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        start = <span class=\"number\">0</span> <span class=\"comment\"># 起點</span></span><br><span class=\"line\"></span><br><span class=\"line\">        end = <span class=\"built_in\">len</span>(nums)-<span class=\"number\">1</span> <span class=\"comment\"># 終點</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> start &lt;= end:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 設定中間值</span></span><br><span class=\"line\">            middle = start + (end-start)//<span class=\"number\">2</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 判斷 target 是否等於 middle</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> target == nums[middle]:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 判斷 target 是否大於</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> target &gt; nums[middle]:</span><br><span class=\"line\">                start = middle+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 判斷 target 是否小於</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> :</span><br><span class=\"line\">                end = middle-<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> start</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>0ms</td>\n<td>41.9MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>63ms</td>\n<td>17.2MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Array","Easy"]},{"title":"[LeetCode] 118. Pascal's Triangle","url":"/2023/05/28/LeetCode-118-Pascal-s-Triangle-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　這題的大方向是要如何找到上一行的上一列的元素來做兩兩相加的運算，像是動態規劃的邏輯思考，需要用到雙迴圈的關係，時間複雜度達 <code>O(n²)</code>，這裡有 JAVA 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>Given an integer <code>numRows</code>, return the first numRows of <strong>Pascal’s triangle</strong>.<br>In <strong>Pascal’s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p>\n</blockquote>\n<blockquote>\n<p>給定一個整數 <code>numRows</code>，回傳一個相對應層數的帕斯卡三角形。<br>在帕斯卡三角形裡遍歷的每個數字，都是其上方兩個數的合：</p>\n</blockquote>\n<div style=\"display:inline-block;\"> <img width=\"100%\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif\" alt=\"Your Image\" style=\"float: left; margin-right: 10px;\"> </div>\n\n\n<p>題目連結：<a href=\"https://leetcode.com/problems/pascals-triangle/\">https://leetcode.com/problems/pascals-triangle/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p><code>1 &lt;= numRows &lt;= 30</code></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: numRows = <span class=\"number\">5</span></span><br><span class=\"line\">Output:</span><br><span class=\"line\">[</span><br><span class=\"line\">     [<span class=\"number\">1</span>],</span><br><span class=\"line\">    [<span class=\"number\">1</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">   [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\">  [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\"> [<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: numRows = <span class=\"number\">1</span></span><br><span class=\"line\">Output: [[<span class=\"number\">1</span>]]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><p>這題的大方向是要如何找到上一行的上一列的元素來做兩兩相加的運算，像是動態規劃的邏輯思考。</p>\n<blockquote>\n<ul>\n<li>首先我們把帕斯卡三角形想像成一個大型的 List，再把這個大型的 List 裡的每個元素放入個別 List 裡來當作每一列。</li>\n<li>已經有了兩個要件，接著用雙迴圈去遍歷大型的 List 裡的每一列放我們要放的元素。</li>\n<li>可是不要忘了要判斷每一列的頭跟尾都要是 1 才能把對的元素放在對位置。</li>\n<li>解決頭尾已經是 1 了，再把前一列的兩值加起來後依依放進去。 (這邊要注意，因我們用的是 ArrayList 類，需要用 <code>.get()</code> 方法來取得元素的位置)</li>\n<li>最後把每一列放入大型的 List 裡。</li>\n</ul>\n</blockquote>\n<h3 id=\"JAVA-實現\"><a href=\"#JAVA-實現\" class=\"headerlink\" title=\"JAVA 實現\"></a>JAVA 實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">generate</span><span class=\"params\">(<span class=\"type\">int</span> numRows)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 創建二維列表</span></span><br><span class=\"line\">        List&lt;List&lt;Integer&gt;&gt; nums = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 為了防止無效輸入，直接回傳一個空的列表</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numRows &lt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;numRows; i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 每一列</span></span><br><span class=\"line\">            List&lt;Integer&gt; row = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">            <span class=\"comment\">// 如果第一行要生成數字，j&lt;i =&gt; 0&lt;0 無法成立，i 應要 +1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;i+<span class=\"number\">1</span>; j++)&#123; </span><br><span class=\"line\">                <span class=\"comment\">// 判斷 list 的頭尾 (到了第5行要總生成5個數字，最後一個數字)</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (j==<span class=\"number\">0</span> || j==i)&#123;</span><br><span class=\"line\">                    row.add(<span class=\"number\">1</span>); <span class=\"comment\">// 是 0 的話插入 1</span></span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 因要從二維列表取值，從第 i-1 行中取得第 j-1 的元素</span></span><br><span class=\"line\">                    row.add(nums.get(i-<span class=\"number\">1</span>).get(j-<span class=\"number\">1</span>) + nums.get(i-<span class=\"number\">1</span>).get(j)); <span class=\"comment\">// 把前一列的兩值加起來</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            nums.add(row); <span class=\"comment\">// 把列表插入二維列表</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">generate</span>(<span class=\"params\">self, numRows: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        nums = [] <span class=\"comment\"># 大三角形</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(numRows):</span><br><span class=\"line\">            row = [] <span class=\"comment\"># 每行</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)+<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> j==<span class=\"number\">0</span> <span class=\"keyword\">or</span> j==i: <span class=\"comment\"># 判斷頭尾</span></span><br><span class=\"line\">                    row.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    row.append(nums[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>] + nums[i-<span class=\"number\">1</span>][j]) <span class=\"comment\"># 把前一列的兩值加起來</span></span><br><span class=\"line\">            nums.append(row)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>1ms</td>\n<td>41.1MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>48ms</td>\n<td>16.3MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Array","Easy"]},{"title":"[LeetCode] 53. Maximum Subarray","url":"/2023/05/31/LeetCode-53-Maximum-Subarray-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　這題是一個經典的動態規劃問題，目標是找到一個陣列中連續子陣列的合還有回傳最大值，時間複雜度可達 <code>O(n)</code>，這裡有 JAVA 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>Given an integer array <code>nums</code>, find the subarray with the largest sum, and return its sum.</p>\n</blockquote>\n<blockquote>\n<p>給定一個整數陣列 <code>nums</code> ，找到最大總合的子陣列，然後回傳子陣列的總合。</p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/maximum-subarray/\">https://leetcode.com/problems/maximum-subarray/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p><code>1 &lt;= nums.length &lt;= 105</code><br><code>104 &lt;= nums[i] &lt;= 104</code></p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [-<span class=\"number\">2</span>,<span class=\"number\">1</span>,-<span class=\"number\">3</span>,<span class=\"number\">4</span>,-<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,-<span class=\"number\">5</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">Output: <span class=\"number\">6</span></span><br><span class=\"line\">Explanation: The subarray [<span class=\"number\">4</span>,-<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>] has the largest sum <span class=\"number\">6.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">1</span>]</span><br><span class=\"line\">Output: <span class=\"number\">1</span></span><br><span class=\"line\">Explanation: The subarray [<span class=\"number\">1</span>] has the largest sum <span class=\"number\">1.</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [<span class=\"number\">5</span>,<span class=\"number\">4</span>,-<span class=\"number\">1</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>]</span><br><span class=\"line\">Output: <span class=\"number\">23</span></span><br><span class=\"line\">Explanation: The subarray [<span class=\"number\">5</span>,<span class=\"number\">4</span>,-<span class=\"number\">1</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>] has the largest sum <span class=\"number\">23.</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><p>直觀的做法是把元素依依累加下去，這也代表為連續的子陣列，然後再將這個子陣列相加的最大數存起來。</p>\n<blockquote>\n<ul>\n<li>遍歷索引累加下去，子陣列的合會越來越大，代表此子陣列的合上限一直在增加。(這樣可以確保當前子陣列的總合是連續的，且是最大的值)</li>\n<li>再來比較子陣列的合跟最大值，更新到最大的值。</li>\n<li>後續要判斷相加的合如果小於 0 的話，重新找子陣列的起點，再依依累加下去。</li>\n<li>因為子陣列的合為負數，表示對後續的合沒有貢獻，將其重置為 0。(假如是負數的話對於子陣列的合會被扣掉)</li>\n</ul>\n</blockquote>\n<h3 id=\"JAVA-實現\"><a href=\"#JAVA-實現\" class=\"headerlink\" title=\"JAVA 實現\"></a>JAVA 實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxSubArray</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> nums.length; <span class=\"comment\">// 陣列的長度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> Integer.MIN_VALUE; <span class=\"comment\">// 確保整數為最小值 (有可能比0還要小)</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 子陣列的合</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            sum += nums[i]; <span class=\"comment\">// 子陣列的合 + 當下索引的值</span></span><br><span class=\"line\">            max = Math.max(sum,max); <span class=\"comment\">// 子陣列的合、最大值，取比較大的數</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum&lt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                sum = <span class=\"number\">0</span>; <span class=\"comment\">// 子陣列的合重製為 0</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> max; <span class=\"comment\">// 回傳最大值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxSubArray</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        </span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(nums) <span class=\"comment\"># 陣列長度</span></span><br><span class=\"line\">        current_sum = <span class=\"number\">0</span> <span class=\"comment\"># 子陣列的合</span></span><br><span class=\"line\">        current_max = <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;-inf&#x27;</span>) <span class=\"comment\"># 確保是最小的整數</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\"></span><br><span class=\"line\">            current_sum += nums[i] <span class=\"comment\"># 子陣列的合 + 當下索引的值</span></span><br><span class=\"line\">            current_max = <span class=\"built_in\">max</span>(current_sum, current_max) <span class=\"comment\"># 子陣列的合、最大值，取比較大的數</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (current_sum&lt;<span class=\"number\">0</span>):  </span><br><span class=\"line\">                current_sum = <span class=\"number\">0</span> <span class=\"comment\"># 子陣列的合重製為 0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> current_max <span class=\"comment\"># 回傳最大數</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>1ms</td>\n<td>59.1MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>719ms</td>\n<td>30.6MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Array","Medium"]},{"title":"[教學] Vue element UI + Spring Boot 表單加圖片一起傳至後端","url":"/2023/04/04/Vue-element-Spring-Boot-picture-form-base64-upload/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><u>前言</u></h2><p>在 Web 專案中多多少少都會遇到要把表單資料傳至後端儲存的功能，可是外加圖片檔案後就變得不那麼單純，這邊想分享是把表單資料加上圖片檔案，放在同一個物件內傳送到後端做保存。</p>\n<h2 id=\"問題敘述\"><a href=\"#問題敘述\" class=\"headerlink\" title=\"問題敘述\"></a><u>問題敘述</u></h2><p>把網頁中的彈跳視窗內的表單與圖片檔案，以 base64 格式一起傳至後端，前端以虛擬靜態路徑顯示圖片。</p>\n<h2 id=\"效果展示\"><a href=\"#效果展示\" class=\"headerlink\" title=\"效果展示\"></a><u>效果展示</u></h2><p><img src=\"https://drive.google.com/uc?export=view&id=1DqCD7K-b-E3u_rmEeEa8VfKyxSdlNK_E\" alt=\"upload-photos\" title=\"upload-photos\"></p>\n<h2 id=\"邏輯思路\"><a href=\"#邏輯思路\" class=\"headerlink\" title=\"邏輯思路\"></a><u>邏輯思路</u></h2><ol>\n<li>前端取得表單和圖片的 base64 格式，傳至後端。</li>\n<li>後端取得表單內容和解析 base64 格式，轉換成圖片jpg 格式。</li>\n<li>把圖片保存至本機，製作圖片的虛擬靜態路徑，保存在資料庫裡。</li>\n</ol>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a><u>Vue</u></h2><h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a><u>HTML</u></h3><p>這裡是使用 element UI 的上傳檔案模板</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">  httpRequest：圖片覆蓋默認的上傳行為</span></span><br><span class=\"line\"><span class=\"comment\">  beforeUpload：上傳前判斷圖片大小、類型</span></span><br><span class=\"line\"><span class=\"comment\">  handleExceed：上傳超出數量提醒</span></span><br><span class=\"line\"><span class=\"comment\">  handleChange：改變檔案樣子</span></span><br><span class=\"line\"><span class=\"comment\">  :limit：上傳最大數量</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;上傳照片&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;img&quot;</span> <span class=\"attr\">label-width</span>=<span class=\"string\">&quot;100px&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;editForm.avatar&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;false&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">el-input</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-upload</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;upload-demo&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">ref</span>=<span class=\"string\">&quot;upload&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">action</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">accept</span>=<span class=\"string\">&quot;image/jpeg, image/png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:http-request</span>=<span class=\"string\">&quot;httpRequest&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:before-upload</span>=<span class=\"string\">&quot;beforeUpload&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:on-exceed</span>=<span class=\"string\">&quot;handleExceed&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:on-change</span>=<span class=\"string\">&quot;handleChange&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:limit</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">:data</span>=<span class=\"string\">&quot;editForm&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">el-button</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;trigger&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;small&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;primary&quot;</span>&gt;</span>選取照片<span class=\"tag\">&lt;/<span class=\"name\">el-button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;tip&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;el-upload__tip&quot;</span>&gt;</span>只能上傳 jepg、png 檔案，且不超過 5 MB<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-upload</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a><u>JavaScript</u></h3><p>這裡是前端的邏輯處理，把圖片檔案轉成 Base64 格式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">fileList</span>: [], <span class=\"comment\">// 存放圖片檔案</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 圖片覆蓋默認的上傳的行為，可以自定義上傳的實現，將上傳的檔案依次添加到 fileList 陣列中，支持多個檔案 </span></span><br><span class=\"line\">  <span class=\"title function_\">httpRequest</span>(<span class=\"params\">option</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fileList</span>.<span class=\"title function_\">push</span>(option)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 圖片上傳前處理 </span></span><br><span class=\"line\">  <span class=\"title function_\">beforeUpload</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileSize = file.<span class=\"property\">size</span>; <span class=\"comment\">// 用 size 屬性，判斷檔案大小不能超過 5MB</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName = file.<span class=\"property\">name</span>; <span class=\"comment\">// 用檔案名 name 後綴，判斷檔案類型</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"variable constant_\">FIVE_M</span> = <span class=\"number\">5</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 5MB</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 大於 5MB 不允許上傳 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileSize &gt; <span class=\"variable constant_\">FIVE_M</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$message</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;最大上傳 5 MB&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 允許的圖片類型 (正規表達式)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/\\.(jpg|jpeg|png|JPG|PNG)$/</span>.<span class=\"title function_\">test</span>(fileName)) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$message</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;只能上傳 jpg、png 格式!&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 檔案數量過多時提醒 </span></span><br><span class=\"line\">  <span class=\"title function_\">handleExceed</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.$message(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&#x27;error&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;最多支持 1 個照片上傳&#x27;</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把圖片轉換成 Base64</span></span><br><span class=\"line\">  <span class=\"title function_\">handleChange</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// raw 是前端放置原始資料的類檔案物件 Blob (用於圖片、檔案)</span></span><br><span class=\"line\">    <span class=\"comment\">// 有這個物件裡的東西， Js 才能讀寫二進位資料的檔案</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">getBase64</span>(file.<span class=\"property\">raw</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123; </span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">editForm</span>.<span class=\"property\">avatar</span> = res; <span class=\"comment\">// 轉好的資料放進物件裡</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 轉換邏輯</span></span><br><span class=\"line\">  <span class=\"title function_\">getBase64</span>(<span class=\"params\">file</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> imgResult = <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// 裝 Base64 字串的容器</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(); <span class=\"comment\">// 讀取檔案方法</span></span><br><span class=\"line\">      reader.<span class=\"title function_\">readAsDataURL</span>(file); <span class=\"comment\">// 讀取圖片後，編碼成 Base64 格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 將讀取的結果放到變數</span></span><br><span class=\"line\">      reader.<span class=\"property\">onload</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        imgResult = reader.<span class=\"property\">result</span>; </span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 失敗傳錯誤訊息</span></span><br><span class=\"line\">      reader.<span class=\"property\">onerror</span> = <span class=\"keyword\">function</span> (<span class=\"params\">error</span>) &#123; </span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 成功傳出去</span></span><br><span class=\"line\">      reader.<span class=\"property\">onloadend</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123; </span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(imgResult);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a><u>Spring Boot</u></h2><h3 id=\"Entity\"><a href=\"#Entity\" class=\"headerlink\" title=\"Entity\"></a><u>Entity</u></h3><p>這裡繼承了一個我專案中的父類實體，與這個教學毫無關係，這裡想表達我的實體屬性是 avatar，其他屬性略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ManageUser</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseEntity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String avatar; <span class=\"comment\">// 使用者圖示</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a><u>Config</u></h3><p>這邊很重要，瀏覽器是看不懂你本機電腦裡的圖片路徑的，要瀏覽器顯示你的圖片的話，一定要配置這個在 Spring 裡。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span> <span class=\"comment\">// 配置在 Spring 裡</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyWebConfigurer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurationSupport</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"comment\">// 覆蓋重寫 </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 對檔案的路徑進行配置，建立一個靜態虛擬路徑 /api/file/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 即前端只要在&lt;img src=&quot;/Path/picName.jpg&quot; /&gt; 便可以直接引用圖片</span></span><br><span class=\"line\"><span class=\"comment\">         * 這是圖片的物理路徑 &quot;file:/ + 本地圖片的實體地址&quot;</span></span><br><span class=\"line\"><span class=\"comment\">         * 這邊要注意，最後放圖片的資料夾後要加一個斜線，斜線後面才是你的圖片名稱</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">&quot;/api/file/**&quot;</span>).addResourceLocations(<span class=\"string\">&quot;file:&quot;</span> + <span class=\"string\">&quot;D:/xxx/src/main/resources/static/img/&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">super</span>.addResourceHandlers(registry);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Utils\"><a href=\"#Utils\" class=\"headerlink\" title=\"Utils\"></a><u>Utils</u></h3><p>工具類來處理前端傳來的物件，將 base64 格式轉換成 jpg 圖片格式，並保存圖片在本機，把虛擬靜態路徑回傳。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> <span class=\"comment\">// log</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">// 注入到 spring 容器</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImgUtils</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 檔案隨機取名(取得隨機 uuid)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getUUID</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把 uuid 裡的 &quot;-&quot; 換成 &quot;&quot; 空</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uuid</span> <span class=\"operator\">=</span> UUID.randomUUID().toString().replaceAll(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> uuid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 取得 ManageUser 中的 Avatar 的 base64</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getAvatarBase64</span><span class=\"params\">(String base64)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">imgUrl</span> <span class=\"operator\">=</span> ImgUtils.handleUploadPicture(base64); <span class=\"comment\">// 轉換邏輯後取得虛擬靜態 url</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;圖片url：&quot;</span> + imgUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> imgUrl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 轉換邏輯</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">handleUploadPicture</span><span class=\"params\">(String base64)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 虛擬靜態位置</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">fileUrl</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 最後重組的實體路徑</span></span><br><span class=\"line\">        String lastFilePath;</span><br><span class=\"line\">        <span class=\"comment\">// 實體資料夾目錄 (最後放圖片的資料夾後要加一個斜線，斜線後面才是你的圖片名稱)</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">uploadFolder</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;D:/xxx/src/main/resources/static/img/&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 虛擬路徑位址</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">apiUrl</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;http://localhost:8081/api/file/&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 副檔名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">suffix</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 判斷前端來的附檔名為何</span></span><br><span class=\"line\">        <span class=\"comment\">// .startsWith() 方法判斷字符串，是否從字符串 data:image/jpg 開始</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (base64.startsWith(<span class=\"string\">&quot;data:image/jpg&quot;</span>)) &#123;</span><br><span class=\"line\">            suffix = <span class=\"string\">&quot;.jpg&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (base64.startsWith(<span class=\"string\">&quot;data:image/jpeg&quot;</span>)) &#123;</span><br><span class=\"line\">            suffix = <span class=\"string\">&quot;.jpeg&quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (base64.startsWith(<span class=\"string\">&quot;data:image/png&quot;</span>)) &#123;</span><br><span class=\"line\">            suffix = <span class=\"string\">&quot;.png&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 新的圖片檔名</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">newFileName</span> <span class=\"operator\">=</span> ImgUtils.getUUID() + suffix; <span class=\"comment\">// uuid 編碼 + 後戳 .jpg</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 判斷有無實體資料夾</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">folder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(uploadFolder);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!folder.exists()) &#123;</span><br><span class=\"line\">            folder.mkdirs(); <span class=\"comment\">// 創建資料夾</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 檔案 IO 流：該類用來創建一個檔案並向檔案中寫資料</span></span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">BASE64Decoder</span> <span class=\"variable\">decoder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BASE64Decoder</span>(); <span class=\"comment\">// base64 解碼方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            lastFilePath = uploadFolder + File.separator + newFileName; <span class=\"comment\">// 實體位置 + 系統目錄中的間隔符 + 新的圖片檔名</span></span><br><span class=\"line\">            out = <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(lastFilePath); <span class=\"comment\">// 寫到檔案 IO 流裡</span></span><br><span class=\"line\">            <span class=\"type\">byte</span>[] decoderBytes = decoder.decodeBuffer(base64.split(<span class=\"string\">&quot;,&quot;</span>)[<span class=\"number\">1</span>]); <span class=\"comment\">// 前端 base64 資料解碼</span></span><br><span class=\"line\">            out.write(decoderBytes); <span class=\"comment\">// 寫進檔案 IO 流裡</span></span><br><span class=\"line\">            fileUrl = apiUrl + newFileName; <span class=\"comment\">// 虛擬靜態路徑 + 新的圖片檔名</span></span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;虛擬靜態路徑：&quot;</span> + fileUrl);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (out != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    out.flush(); <span class=\"comment\">// 將位元組強制寫入</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    out.close(); <span class=\"comment\">// 關掉流</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fileUrl; <span class=\"comment\">// 回傳虛擬靜態位置</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a><u>Service</u></h3><p>Spring Boot 業務的介面類 (由 Controller 來引用)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ManageUserService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">IService</span>&lt;ManageUser&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新增使用者圖示</span></span><br><span class=\"line\">    ManageUser <span class=\"title function_\">UserAvatarInfoSave</span><span class=\"params\">(ManageUser manageUser)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ServiceImpl\"><a href=\"#ServiceImpl\" class=\"headerlink\" title=\"ServiceImpl\"></a><u>ServiceImpl</u></h3><p>Spring Boot 業務的實現類 (由業務的介面類來管理)<br>這裡主要的工作是 Controller 收到前端的 manageUser 物件了，現在要把 manageUser 物件裡的 Avatar (Base64格式)，拿出來給上面寫好的工具類處理，解析轉換完後把他丟回 manageUser 物件裡。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span> <span class=\"comment\">// log</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span> <span class=\"comment\">// 注入到 spring 容器 (標記為 Service 層的 class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ManageUserServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ServiceImpl</span>&lt;ManageUserMapper, ManageUser&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">ManageUserService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 處理 Avatar 工具類</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    ImgUtils imgUtils;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 處理 Avatar</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"comment\">// 覆蓋重寫</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ManageUser <span class=\"title function_\">UserAvatarInfoSave</span><span class=\"params\">(ManageUser manageUser)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 取得前端傳來的 Avatar 的 base64</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">avatar</span> <span class=\"operator\">=</span> manageUser.getAvatar();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 取得工具類處理好的 url</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">imgUrl</span> <span class=\"operator\">=</span> imgUtils.getAvatarBase64(avatar);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 添加到 manageUser 物件裡</span></span><br><span class=\"line\">        manageUser.setAvatar(imgUrl);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> manageUser;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"Controller\"></a><u>Controller</u></h3><p>Controller 接收到前端傳來的資料物件後，使用業務的介面類，來引用業務的實現類，去調用工具類處理 Avatar，處理完在把整個 manageUser 物件存進資料庫裡。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span> <span class=\"comment\">// 是 @ResponseBody 和 @Controller 的組合註解，處理 http 請求</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/manage/user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ManageUserController</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">BaseController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新增(創建新的用戶)</span></span><br><span class=\"line\">    <span class=\"comment\">// @Validated 驗證實體參數、@RequestBody 因放在 body 裡，是使用 json 格式，但只能用 POST 傳遞物件</span></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/save&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Result <span class=\"title function_\">save</span><span class=\"params\">(<span class=\"meta\">@Validated</span> <span class=\"meta\">@RequestBody</span> ManageUser manageUser)</span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 新增使用者圖示</span></span><br><span class=\"line\">        manageUserService.UserAvatarInfoSave(manageUser);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 使用 MyBatis Plus 的 .save() 函數新增至資料庫(insert)</span></span><br><span class=\"line\">        manageUserService.save(manageUser);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Result.succ(manageUser); <span class=\"comment\">// 回傳給前端 (統一結果類 Result)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a><u>結語</u></h2><p>這邊盡可能提供詳細的方法給各位參考，筆者也還在努力學習中，寫的並不是非常好，可能有哪些地方邏輯可以再加強或者再優化，也不吝嗇被指教，感謝各位的觀看。</p>\n","categories":["Spring Boot"]},{"title":"[教學] 架站 Hexo 遇到 ERROR Try running: rm -rf node_modules && npm install --force","url":"/2022/04/28/%E6%95%99%E5%AD%B8-%E6%9E%B6%E7%AB%99-Hexo-%E9%81%87%E5%88%B0-ERROR-Try-running-rm-rf-node-modules-npm-install-force/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>架站 Hexo 遇到 <code>ERROR Try running: &#39;rm -rf node_modules &amp;&amp; npm install --force’</code></p>\n<h3 id=\"環境卸載乾淨\"><a href=\"#環境卸載乾淨\" class=\"headerlink\" title=\"環境卸載乾淨\"></a>環境卸載乾淨</h3><p>先完全卸載乾淨 node.js，重新安裝 node.js，通常在官方網站下載的 node.js 都是最新版，不用擔心版本問題。請參考：<a href=\"https://www.796t.com/post/bGllbQ==.html\" title=\"如何從Windows完全刪除node.js\">乾淨移除 node.js</a></p>\n<h3 id=\"安裝-Hexo\"><a href=\"#安裝-Hexo\" class=\"headerlink\" title=\"安裝 Hexo\"></a>安裝 Hexo</h3><p>在命令提示字元(系統管理員)安裝 Hexo，輸入</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">hexo-cli</span>  <span class=\"comment\"># Hexo 官方提供</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看安裝完成\"><a href=\"#查看安裝完成\" class=\"headerlink\" title=\"查看安裝完成\"></a>查看安裝完成</h3><p>走完上述兩個步驟後，可以查詢看看電腦裡是否有安裝了 node.js 和 Hexo ，在命令提示字元裡輸入</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">node.js</span> <span class=\"string\">-v</span> <span class=\"comment\"># 查看版本號 </span></span><br><span class=\"line\"><span class=\"string\">hexo</span> <span class=\"string\">-v</span> <span class=\"comment\"># 查看版本號</span></span><br></pre></td></tr></table></figure>\n\n<p>​有查詢到代表成功安裝在電腦裡了</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">C:\\Windows\\system32&gt;node</span> <span class=\"string\">-v</span></span><br><span class=\"line\"><span class=\"string\">v16.14.2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">C:\\Windows\\system32&gt;hexo</span> <span class=\"string\">-v</span></span><br><span class=\"line\"><span class=\"attr\">hexo-cli:</span> <span class=\"number\">4.3</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">os:</span> <span class=\"string\">win32</span> <span class=\"number\">10.0</span><span class=\"number\">.19043</span></span><br><span class=\"line\"><span class=\"attr\">node:</span> <span class=\"number\">16.14</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"attr\">v8:</span> <span class=\"number\">9.4</span><span class=\"number\">.146</span><span class=\"number\">.24</span><span class=\"string\">-node.20</span></span><br><span class=\"line\"><span class=\"attr\">uv:</span> <span class=\"number\">1.43</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">zlib:</span> <span class=\"number\">1.2</span><span class=\"number\">.11</span></span><br><span class=\"line\"><span class=\"attr\">brotli:</span> <span class=\"number\">1.0</span><span class=\"number\">.9</span></span><br><span class=\"line\"><span class=\"attr\">ares:</span> <span class=\"number\">1.18</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">modules:</span> <span class=\"number\">93</span></span><br><span class=\"line\"><span class=\"attr\">nghttp2:</span> <span class=\"number\">1.45</span><span class=\"number\">.1</span></span><br><span class=\"line\"><span class=\"attr\">napi:</span> <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"attr\">llhttp:</span> <span class=\"number\">6.0</span><span class=\"number\">.4</span></span><br><span class=\"line\"><span class=\"attr\">openssl:</span> <span class=\"number\">1.1</span><span class=\"string\">.1n+quic</span></span><br><span class=\"line\"><span class=\"attr\">cldr:</span> <span class=\"number\">40.0</span></span><br><span class=\"line\"><span class=\"attr\">icu:</span> <span class=\"number\">70.1</span></span><br><span class=\"line\"><span class=\"attr\">tz:</span> <span class=\"string\">2021a3</span></span><br><span class=\"line\"><span class=\"attr\">unicode:</span> <span class=\"number\">14.0</span></span><br><span class=\"line\"><span class=\"attr\">ngtcp2:</span> <span class=\"number\">0.1</span><span class=\"number\">.0</span><span class=\"string\">-DEV</span></span><br><span class=\"line\"><span class=\"attr\">nghttp3:</span> <span class=\"number\">0.1</span><span class=\"number\">.0</span><span class=\"string\">-DEV</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"創建-Hexo-專案資料夾\"><a href=\"#創建-Hexo-專案資料夾\" class=\"headerlink\" title=\"創建 Hexo 專案資料夾\"></a>創建 Hexo 專案資料夾</h3><p>移至你想要放專案的目錄下，用命令提示字元(系統管理員)創建 Hexo 專案資料夾，輸入</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">hexo</span> <span class=\"string\">init</span> <span class=\"string\">&lt;自行取名資料夾名稱&gt;</span> </span><br></pre></td></tr></table></figure>\n\n<p>沒意外的話命令提示字元(系統管理員)上會顯示</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">INFO</span>  <span class=\"string\">Cloning</span> <span class=\"string\">hexo-starter</span> <span class=\"string\">https://github.com/hexojs/hexo-starter.git</span>  <span class=\"comment\"># 從git上clone下來Hexo</span></span><br><span class=\"line\"><span class=\"string\">INFO</span>  <span class=\"string\">Install</span> <span class=\"string\">dependencies</span>  <span class=\"comment\"># 檢查權限</span></span><br><span class=\"line\"><span class=\"string\">INFO</span>  <span class=\"string\">Start</span> <span class=\"string\">blogging</span> <span class=\"string\">with</span> <span class=\"string\">Hexo!</span>  <span class=\"comment\"># 可以開始使用你的部落格了</span></span><br></pre></td></tr></table></figure>\n\n<p>你的目錄下會有一個你取名的 Hexo 專案資料夾了!<br>最後再試試看在令提示字元(系統管理員)發布一篇文章，輸入</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">$</span> <span class=\"string\">hexo</span> <span class=\"string\">new</span> <span class=\"string\">&#x27;我的第一篇部落格文章&#x27;</span> </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h3><p>​成功後會顯示</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">INFO</span>  <span class=\"string\">Validating</span> <span class=\"string\">config</span></span><br><span class=\"line\"><span class=\"attr\">INFO  Created:</span> <span class=\"string\">C:\\thisischris\\isHexo\\source\\_posts\\我的第一篇部落格文章.md</span></span><br></pre></td></tr></table></figure>\n\n<p>文章會儲存在專案裡的 <code>source</code> 裡的 <code>_posts</code> 資料夾裡</p>\n","categories":["Hexo"]},{"title":"[LeetCode] 704. Binary Search","url":"/2023/05/29/LeetCode-704-Binary-Search-Java-Python/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>　　這題用的技巧是二分搜尋法，原理是每次循環都會將搜索範圍縮小一半。演算法通常需要使用二分思想，即每次能夠排除一半的範圍，快速的找出陣列中所要求的元素位置，這樣時間複雜度可達 <code>O(log n)</code>，這裡有 JAVA 和 Python 的寫法。</p>\n<h3 id=\"題目\"><a href=\"#題目\" class=\"headerlink\" title=\"題目\"></a>題目</h3><blockquote>\n<p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.<br>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p>\n</blockquote>\n<blockquote>\n<p>給定一個整數陣列 <code>nums</code> ，這是個上升排序陣列，和一個目標整數 <code>target</code> ，寫一個方法去搜尋在 <code>nums</code> 陣列裡的目標整數 <code>target</code> 。如果目標整數 <code>target</code> 存在就回傳這個索引。否則回傳 <code>-1</code>。<br>你必須寫一個時間複雜度是 <code>O(log n)</code> 的演算法。 </p>\n</blockquote>\n<p>題目連結：<a href=\"https://leetcode.com/problems/binary-search/\">https://leetcode.com/problems/binary-search/</a></p>\n<h3 id=\"題目限制\"><a href=\"#題目限制\" class=\"headerlink\" title=\"題目限制\"></a>題目限制</h3><p><code>1 &lt;= numRows &lt;= 30</code><br><code>1 &lt;= nums.length &lt;= 104</code><br><code>104 &lt; nums[i], target &lt; 104</code><br>All the integers in <code>nums</code> are <strong>unique</strong>.<br><code>nums</code> is sorted in ascending order.</p>\n<h3 id=\"範例\"><a href=\"#範例\" class=\"headerlink\" title=\"範例\"></a>範例</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">12</span>], target = <span class=\"number\">9</span></span><br><span class=\"line\">Output: <span class=\"number\">4</span></span><br><span class=\"line\">Explanation: <span class=\"number\">9</span> exists in nums and its index is <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Input: nums = [-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">12</span>], target = <span class=\"number\">2</span></span><br><span class=\"line\">Output: -<span class=\"number\">1</span></span><br><span class=\"line\">Explanation: <span class=\"number\">2</span> does not exist in nums so <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"思路-amp-筆記\"><a href=\"#思路-amp-筆記\" class=\"headerlink\" title=\"思路&amp;筆記\"></a>思路&amp;筆記</h3><p>這題用的技巧是二分搜尋法，原理是每次循環都會將搜索範圍縮小一半。</p>\n<blockquote>\n<ol>\n<li>middle &#x3D; start + ( end - start ) &#x2F; 2 可取得中間值</li>\n<li>找出目標值在中間值的左側還是右側</li>\n<li>搜索範圍越來越小，直到最後回傳中間值就是答案</li>\n</ol>\n</blockquote>\n<p>[注意點] 之所以要用上述中間值的寫法會比較安全，因如果 start 和 end 趨近於最大數時，兩者相加起來的合可能會造成整數溢位</p>\n<h3 id=\"JAVA-實現\"><a href=\"#JAVA-實現\" class=\"headerlink\" title=\"JAVA 實現\"></a>JAVA 實現</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; <span class=\"comment\">// 起點位置</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> nums.length-<span class=\"number\">1</span>; <span class=\"comment\">// 終點位置</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt;= end )&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">middle</span> <span class=\"operator\">=</span> start + (end-start)/<span class=\"number\">2</span>; <span class=\"comment\">// 中間值</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &gt; nums[middle])&#123; <span class=\"comment\">// 目標值 &gt; 陣列中間值 </span></span><br><span class=\"line\">                start = middle + <span class=\"number\">1</span>; <span class=\"comment\">// 重新定義起點，下次回圈從新的起點開始就好 (因為目標值一定比自己大，要不包含 middle 自己)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &lt; nums[middle])&#123; <span class=\"comment\">// 目標值 &lt; 陣列中間值 </span></span><br><span class=\"line\">                end = middle - <span class=\"number\">1</span>; <span class=\"comment\">// 重新定義終點，下次回圈找到新的終點就好 (因為目標值一定比自己小，要不包含 middle 自己)</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 目標值 = 陣列中間值</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle; <span class=\"comment\">// 找到答案，回傳中間值索引</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>; <span class=\"comment\">// 沒有這個數回傳 -1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python-實現\"><a href=\"#Python-實現\" class=\"headerlink\" title=\"Python 實現\"></a>Python 實現</h3><p>使用了和 Java 一樣的邏輯執行，換成 Python 的寫法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">search</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], target: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        start = <span class=\"number\">0</span> <span class=\"comment\"># 起點</span></span><br><span class=\"line\">        end = <span class=\"built_in\">len</span>(nums)-<span class=\"number\">1</span> <span class=\"comment\"># 終點</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> start &lt;= end:</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 設定中間值</span></span><br><span class=\"line\">            middle = start + (end-start)//<span class=\"number\">2</span>\t</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 判斷 target 是否大於</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> target &gt; nums[middle]:</span><br><span class=\"line\">                start = middle+<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 判斷 target 是否小於</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> target &lt; nums[middle]:</span><br><span class=\"line\">                end = middle-<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\"># 判斷 target 是否等於 middle</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> :</span><br><span class=\"line\">                <span class=\"keyword\">return</span> middle</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># 都沒有</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"成績\"><a href=\"#成績\" class=\"headerlink\" title=\"成績\"></a>成績</h3><table>\n<thead>\n<tr>\n<th>Language</th>\n<th>Runtime</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Java</td>\n<td>0ms</td>\n<td>45.1MB</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>251ms</td>\n<td>17.9MB</td>\n</tr>\n</tbody></table>\n","categories":["LeetCode","Array","Easy"]},{"title":"[教學] Hexo Next 主題加入 DISQUS 留言板","url":"/2022/11/23/tutorial-Hexo-Next-theme-join-Disqus-message-board/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><u>前言</u></h2><p>這裡附的是 Hexo Next 主題的簡單教學，可能今後 DISQUS 網頁會改版，操作流程可能會換位置，但邏輯大概是一樣的。<br>各位可以在左邊的目錄選擇自己想要看的資訊跳轉。</p>\n<h2 id=\"DISQUS-端註冊\"><a href=\"#DISQUS-端註冊\" class=\"headerlink\" title=\"DISQUS 端註冊\"></a><u>DISQUS 端註冊</u></h2><p>官方網站右上角註冊：<a href=\"https://disqus.com/\">https://disqus.com/</a><br><img src=\"https://drive.google.com/uc?export=view&id=1z2EtteMCYdGR6myL7G91y1cgn09BrhDP\" alt=\"註冊\" title=\"註冊\"><br>可使用 google 帳號連動註冊。<br><img src=\"https://drive.google.com/uc?export=view&id=13CUJ1iavYaCjcCloTVe2kJPY3pj6AQK6\" alt=\"帳號註冊\" title=\"帳號註冊\"></p>\n<h2 id=\"選擇應用\"><a href=\"#選擇應用\" class=\"headerlink\" title=\"選擇應用\"></a><u>選擇應用</u></h2><p>接下來會跳至選擇頁面，我們想要製作應用在網站上，點選 I want to install Disqus on my site<br><img src=\"https://drive.google.com/uc?export=view&id=1PeHGGfWfUwvNlZwTVl9hj_FT4QQLTRqs\" alt=\"選擇\" title=\"選擇\"><br>這先填寫簡單的資料，之後可以在編輯裡填仔細一點，可是要注意的地方是 Website Name 是要跟 Hexo 做連結的，假如像筆者一樣輸入空格，disqus 會自動轉換成 <code>&quot;-&quot;</code> 槓符號。<br>(備註：Website Name 之後可以修改)<br><img src=\"https://drive.google.com/uc?export=view&id=1cS2GpvpTDoUVR1iuMpnHJDOT9E1jgjCH\" alt=\"填寫\" title=\"填寫\"><br>填完後會跳轉至付費方案選擇，我們選擇最底下的 Basic 免費方案。<br><img src=\"https://drive.google.com/uc?export=view&id=1uCpFrY5S06LFk4pxNRlH_3AXUemoNveb\" alt=\"方案選擇\" title=\"方案選擇\"></p>\n<h2 id=\"設定應用\"><a href=\"#設定應用\" class=\"headerlink\" title=\"設定應用\"></a><u>設定應用</u></h2><p>這裡會發現沒有 Hexo 平台的選項<br>我們選擇最底下的 I don’t see my platform listed, install manually with Universal Code.<br><img src=\"https://drive.google.com/uc?export=view&id=1MBvMZU_7OPhyuhBmhKZ8ayL-plBngSB4\" alt=\"選擇平台\" title=\"選擇平台\"><br>之後會跳到設定流程，左上角的位置會在第二項的第二個 Install Instructions，這個部分是要我們把 DISQUS 配置在網站裡，但可以先跳過， Hexo 有套件包可以自動幫我們配置好。<br><img src=\"https://drive.google.com/uc?export=view&id=1hR21amfPc2Ep2aQ2QVjbMFk--am1hqAu\" alt=\"流程\" title=\"流程\"><br>把細部設定填的更完整。<br><img src=\"https://drive.google.com/uc?export=view&id=1HqeXg_3nWPzTMHAtDEy_mLJOrrmLzz82\" alt=\"設定\" title=\"設定\"><br>最後一項 Setup Moderation 是你的留言審核設定。<br><img src=\"https://drive.google.com/uc?export=view&id=1h2B29Zf6UciowzUQKLpT5fy8ptcPuYih\" alt=\"審核\" title=\"審核\"></p>\n<h2 id=\"Hexo-端設定\"><a href=\"#Hexo-端設定\" class=\"headerlink\" title=\"Hexo 端設定\"></a><u>Hexo 端設定</u></h2><p>在 Hexo Next 主題設定檔 <code>_config.yml</code> 找到 disqus。<br>目錄：<code>/themes/next/_config.yml</code><br>設定完留言板就能用了!</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Disqus 留言板功能</span></span><br><span class=\"line\">disqus:</span><br><span class=\"line\">  enable: true <span class=\"comment\"># 開啟</span></span><br><span class=\"line\">  shortname: <span class=\"built_in\">Test-Web</span><span class=\"literal\">-Side</span> <span class=\"comment\"># 輸入剛創建的網站名(輸入空格會轉成 &quot;-&quot; 槓符號)</span></span><br><span class=\"line\">  count: true <span class=\"comment\"># 決定是否要顯示文章的留言數</span></span><br><span class=\"line\">  <span class=\"comment\">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"把評論關閉-點讚功能\"><a href=\"#把評論關閉-點讚功能\" class=\"headerlink\" title=\"把評論關閉(點讚功能)\"></a><u>把評論關閉(點讚功能)</u></h2><p>點讚功能長這樣<br><img src=\"https://drive.google.com/uc?export=view&id=1gkTacB8sV2BKtiJZQWOkrPjzRYfxCsYI\" alt=\"點讚功能\" title=\"點讚功能\"><br>關閉方法：選擇你的應用 -&gt; 點選 Reactions -&gt; 網頁最底下點選 Trun Reactions off<br><img src=\"https://drive.google.com/uc?export=view&id=17WNjGnMyUzPik2ewKJxQ3UIZCp3MazQX\" alt=\"Reactions\" title=\"Reactions\"><br>點選 Yes, Turn Reactions off<br><img src=\"https://drive.google.com/uc?export=view&id=1YJ0EWq6WnWalNtCZXIjieMQRJuoodvks\" alt=\"關閉\" title=\"關閉\"></p>\n<h2 id=\"留言者規範關閉\"><a href=\"#留言者規範關閉\" class=\"headerlink\" title=\"留言者規範關閉\"></a><u>留言者規範關閉</u></h2><p>規範長這樣<br><img src=\"https://drive.google.com/uc?export=view&id=1syvbDHsnJQtbFVOdryh_jM-qC0ZSufF_\" alt=\"規範\" title=\"規範\"><br>關閉方法：選擇你的應用 -&gt; 點選 General -&gt; 設定三四步驟為空白<br>等於不要顯示出規範<br><img src=\"https://drive.google.com/uc?export=view&id=1DsN_Ypje4Wf6EQb-bTH2LKuZVHgzykoW\" alt=\"關閉規範\" title=\"關閉規範\"></p>\n<h2 id=\"調整介面語言\"><a href=\"#調整介面語言\" class=\"headerlink\" title=\"調整介面語言\"></a><u>調整介面語言</u></h2><p>調整方法：選擇你的應用 -&gt; 點選 General -&gt; 設定 Language(Taiwan)<br><img src=\"https://drive.google.com/uc?export=view&id=1LuQJeCdlV5uPjgnDPF2zmUmnYTLyeb1d\" alt=\"調整介面語言\" title=\"調整語言\"></p>\n<h2 id=\"當下頁面關閉留言功能\"><a href=\"#當下頁面關閉留言功能\" class=\"headerlink\" title=\"當下頁面關閉留言功能\"></a><u>當下頁面關閉留言功能</u></h2><p>在頁面的表頭裡設定</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">comments: false <span class=\"comment\"># 在文章的表頭裡設定</span></span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"留言管理\"><a href=\"#留言管理\" class=\"headerlink\" title=\"留言管理\"></a><u>留言管理</u></h2><p>官方網站右上角點 Admin<br><img src=\"https://drive.google.com/uc?export=view&id=13wQqWND3hnXTsnHPQUGlksA-YSKB69aK\" alt=\"管理\" title=\"管理\"><br>點選 Moderate Comments<br><img src=\"https://drive.google.com/uc?export=view&id=12rGedmeSrMEuG5w8Tq7rnfd8TQrBNqHZ\" alt=\"管理\" title=\"管理\"><br>點選 Approved 後可以看到下方顯示了留言訊息<br><img src=\"https://drive.google.com/uc?export=view&id=1LrWwCM2e8hZ1nY-I1dQY2-Km8x0F7Ley\" alt=\"管理\" title=\"管理\"></p>\n<h2 id=\"顯示效果\"><a href=\"#顯示效果\" class=\"headerlink\" title=\"顯示效果\"></a><u>顯示效果</u></h2><p><img src=\"https://drive.google.com/uc?export=view&id=1ycgjhIKoW-YQBBD22yc4-3DhAyMNRB8-\" alt=\"最終\" title=\"最終\"></p>\n<h2 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a><u>結語</u></h2><p>DISQUS 對於筆者來說功能相當強大，有很多附加功能等等，但是用過後發現，對於不同社交媒體帳號的登入，整合的似乎不是很完整，其他登入按鈕如同虛設，點進去後還是要到 DISQUS 官方網站創建帳號才能留言，另外留言的通知只能在留言管理發現，無法很立即的索取到通知，以上是發現到的優缺點，假如有任何問題也歡迎來信或留言跟我說。</p>\n","categories":["Hexo"]}]